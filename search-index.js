var searchIndex = {};
searchIndex["tantivy"] = {"doc":"","items":[[3,"Searcher","tantivy","",null,null],[3,"Index","","",null,null],[3,"Term","","",null,null],[3,"Document","","Tantivy&#39;s Document is the object that can\nbe indexed and then searched for.  ",null,null],[3,"SegmentReader","","",null,null],[3,"TimerTree","","",null,null],[3,"DocAddress","","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"ScoredDoc","","",null,null],[4,"Error","","",null,null],[13,"OpenError","","",1,null],[13,"IOError","","",1,null],[13,"Poisoned","","",1,null],[13,"CorruptedFile","","",1,null],[13,"InvalidArgument","","",1,null],[13,"ErrorInThread","","",1,null],[13,"Other","","",1,null],[4,"SegmentPostingsOption","","",null,null],[13,"NoFreq","","",2,null],[13,"Freq","","",2,null],[13,"FreqAndPositions","","",2,null],[11,"fmt","","",3,null],[11,"doc","","",3,null],[11,"num_docs","","",3,null],[11,"doc_freq","","",3,null],[11,"segments","","",3,null],[11,"for_index","","",3,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"search","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"create_in_ram","","",4,{"inputs":[{"name":"schema"}],"output":{"name":"index"}}],[11,"create","","",4,{"inputs":[{"name":"path"},{"name":"schema"}],"output":{"name":"result"}}],[11,"create_from_tempdir","","",4,{"inputs":[{"name":"schema"}],"output":{"name":"result"}}],[11,"open","","",4,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"writer_with_num_threads","","Creates a multithreaded writer.\nEach writer produces an independant segment.",4,null],[11,"writer","","Creates a multithreaded writer\nIt just calls `writer_with_num_threads` with the number of core as `num_threads` ",4,null],[11,"searcher","","",4,null],[11,"schema","","",4,null],[11,"publish_segment","","Marks the segment as published.",4,null],[11,"publish_merge_segment","","",4,null],[11,"sync","","",4,null],[11,"segments","","",4,null],[11,"segment","","",4,null],[11,"new_segment","","",4,null],[11,"load_metas","","",4,null],[11,"save_metas","","",4,null],[11,"max_doc","","Returns the highest document id ever attributed in\nthis segment + 1.\nToday, `tantivy` does not handle deletes so, it happens\nto also be the number of documents in the index.",5,null],[11,"num_docs","","",5,null],[11,"get_fast_field_reader","","",5,null],[11,"get_fieldnorms_reader","","",5,null],[11,"doc_freq","","",5,null],[11,"get_store_reader","","",5,null],[11,"open","","Open a new segment for reading.",5,{"inputs":[{"name":"segment"}],"output":{"name":"result"}}],[11,"term_infos","","",5,null],[11,"doc","","Returns the document (or to be accurate, its stored field)\nbearing the given doc id.\nThis method is slow and should seldom be called from\nwithin a collector.",5,null],[11,"read_postings","","",5,null],[11,"read_postings_all_info","","",5,null],[11,"get_term_info","","",5,null],[11,"fmt","","",5,null],[11,"encode","","",6,null],[11,"fmt","","",6,null],[11,"new","","",6,{"inputs":[],"output":{"name":"timertree"}}],[11,"total_time","","",6,null],[11,"open","","",6,null],[11,"fmt","","",1,null],[11,"make_other","","",1,{"inputs":[{"name":"e"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"poisonerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"openerror"}],"output":{"name":"error"}}],[0,"postings","","",null,null],[3,"OffsetPostings","tantivy::postings","",null,null],[3,"NothingRecorder","","",null,null],[3,"TermFrequencyRecorder","","",null,null],[3,"TFAndPositionRecorder","","",null,null],[3,"PostingsSerializer","","",null,null],[3,"SpecializedPostingsWriter","","",null,null],[3,"TermInfo","","",null,null],[12,"doc_freq","","",7,null],[12,"postings_offset","","",7,null],[12,"positions_offset","","",7,null],[3,"VecPostings","","",null,null],[3,"ChainedPostings","","",null,null],[3,"SegmentPostings","","",null,null],[3,"IntersectionDocSet","","",null,null],[3,"FreqHandler","","",null,null],[4,"SkipResult","","",null,null],[13,"Reached","","",8,null],[13,"OverStep","","",8,null],[13,"End","","",8,null],[4,"SegmentPostingsOption","","",null,null],[13,"NoFreq","","",2,null],[13,"Freq","","",2,null],[13,"FreqAndPositions","","",2,null],[5,"intersection","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"intersectiondocset"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"record_position","","",9,null],[11,"close_doc","","",9,null],[11,"get_tf_and_posdeltas","","",9,null],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"record_position","","",10,null],[11,"close_doc","","",10,null],[11,"get_tf_and_posdeltas","","",10,null],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"record_position","","",11,null],[11,"close_doc","","",11,null],[11,"get_tf_and_posdeltas","","",11,null],[11,"open","","",12,{"inputs":[{"name":"segment"}],"output":{"name":"result"}}],[11,"load_indexing_options","","",12,null],[11,"new_term","","",12,null],[11,"close_term","","",12,null],[11,"write_doc","","",12,null],[11,"close","","",12,null],[11,"new","","",13,{"inputs":[],"output":{"name":"specializedpostingswriter"}}],[11,"new_boxed","","",13,{"inputs":[],"output":{"name":"box"}}],[11,"close","","",13,null],[11,"suscribe","","",13,null],[11,"serialize","","",13,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"cmp","","",7,null],[11,"fmt","","",7,null],[11,"new","","",14,{"inputs":[{"name":"vec"}],"output":{"name":"chainedpostings"}}],[11,"advance","","",14,null],[11,"doc","","",14,null],[11,"len","","",14,null],[11,"term_freq","","",14,null],[11,"positions","","",14,null],[11,"from","","",15,{"inputs":[{"name":"vec"}],"output":{"name":"vecpostings"}}],[11,"advance","","",15,null],[11,"doc","","",15,null],[11,"skip_next","","",15,null],[11,"len","","",15,null],[11,"term_freq","","",15,null],[11,"positions","","",15,null],[11,"empty","","",16,{"inputs":[],"output":{"name":"segmentpostings"}}],[11,"load_next_block","","",16,null],[11,"from_data","","",16,null],[11,"advance","","",16,null],[11,"doc","","",16,null],[11,"len","","",16,null],[11,"term_freq","","",16,null],[11,"positions","","",16,null],[11,"new","","",17,{"inputs":[{"name":"vec"}],"output":{"name":"intersectiondocset"}}],[11,"advance","","",17,null],[11,"doc","","",17,null],[11,"new","","",18,{"inputs":[{"name":"segmentpostings"},{"name":"docid"}],"output":{"name":"offsetpostings"}}],[11,"advance","","",18,null],[11,"doc","","",18,null],[11,"skip_next","","",18,null],[11,"len","","",18,null],[11,"term_freq","","",18,null],[11,"positions","","",18,null],[11,"new","","",19,{"inputs":[],"output":{"name":"freqhandler"}}],[11,"new_with_freq","","",19,{"inputs":[],"output":{"name":"freqhandler"}}],[11,"new_with_freq_and_position","","",19,null],[11,"positions","","",19,null],[11,"read_freq_block","","",19,null],[11,"read_freq_vint","","",19,null],[11,"freq","","",19,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[8,"DocSet","","",null,null],[10,"advance","","",20,null],[11,"skip_next","","",20,null],[10,"doc","","",20,null],[11,"next","","",20,null],[8,"Recorder","","",null,null],[10,"new","","",21,{"inputs":[],"output":{"name":"self"}}],[10,"record_position","","",21,null],[10,"close_doc","","",21,null],[10,"get_tf_and_posdeltas","","",21,null],[8,"PostingsWriter","","",null,null],[10,"close","","",22,null],[10,"suscribe","","",22,null],[10,"serialize","","",22,null],[8,"Postings","","",null,null],[10,"term_freq","","",23,null],[10,"positions","","",23,null],[8,"ScoredDocSet","","",null,null],[10,"score","","",24,null],[8,"HasLen","","",null,null],[10,"len","","",25,null],[0,"query","tantivy","",null,null],[3,"DAATMultiTermScorer","tantivy::query","",null,null],[3,"MultiTermQuery","","",null,null],[3,"SimilarityExplainer","","",null,null],[3,"TfIdf","","",null,null],[3,"QueryParser","","",null,null],[3,"Explanation","","",null,null],[4,"Occur","","",null,null],[13,"Should","","",26,null],[13,"Must","","",26,null],[13,"MustNot","","",26,null],[11,"fmt","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"num_terms","","",27,null],[11,"from","","",27,{"inputs":[{"name":"vec"}],"output":{"name":"multitermquery"}}],[11,"from","","",27,{"inputs":[{"name":"vec"}],"output":{"name":"multitermquery"}}],[11,"explain","","",27,null],[11,"search","","",27,null],[11,"explain_score","","",28,null],[11,"from","","",28,{"inputs":[{"name":"tsimilarity"}],"output":{"name":"similarityexplainer"}}],[11,"update","","",28,null],[11,"clear","","",28,null],[11,"score","","",28,null],[11,"explain","","",28,null],[11,"new","","",29,{"inputs":[{"name":"schema"},{"name":"vec"}],"output":{"name":"queryparser"}}],[11,"parse_query","","",29,null],[11,"encode","","",30,null],[11,"with_val","","",30,{"inputs":[{"name":"f32"}],"output":{"name":"explanation"}}],[11,"val","","",30,null],[11,"description","","",30,null],[11,"set_formula","","",30,null],[11,"add_child","","",30,null],[11,"format_with_indent","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",31,null],[11,"update","","",31,null],[11,"clear","","",31,null],[11,"new","","",31,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"tfidf"}}],[11,"set_term_names","","",31,null],[11,"score","","",31,null],[11,"explain","","",31,null],[11,"eq","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"new","","",32,{"inputs":[{"name":"vec"},{"name":"taccumulator"}],"output":{"name":"daatmultitermscorer"}}],[11,"scorer","","",32,null],[11,"score","","",32,null],[11,"advance","","",32,null],[11,"doc","","",32,null],[8,"Similarity","","",null,null],[10,"score","","",33,null],[10,"explain","","",33,null],[8,"Query","","",null,null],[10,"search","","",34,null],[10,"explain","","",34,null],[8,"Scorer","","",null,null],[10,"score","","",35,null],[8,"MultiTermAccumulator","","",null,null],[10,"update","","",36,null],[10,"clear","","",36,null],[0,"directory","tantivy","",null,null],[3,"RAMDirectory","tantivy::directory","",null,null],[3,"MmapDirectory","","",null,null],[3,"SharedVec","","",null,null],[4,"ReadOnlySource","","",null,null],[13,"Mmap","","",37,null],[13,"Anonymous","","",37,null],[4,"OpenError","","",null,null],[13,"FileDoesNotExist","","",38,null],[13,"IOError","","",38,null],[11,"fmt","","",39,null],[11,"create_from_tempdir","","",39,{"inputs":[],"output":{"name":"result"}}],[11,"open","","",39,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"open_read","","",39,null],[11,"open_write","","",39,null],[11,"atomic_write","","",39,null],[11,"sync","","",39,null],[11,"sync_directory","","",39,null],[11,"clone","","",40,null],[11,"new","","",40,{"inputs":[],"output":{"name":"sharedvec"}}],[11,"copy_vec","","",40,null],[11,"write","","",40,null],[11,"flush","","",40,null],[11,"seek","","",40,null],[11,"fmt","","",41,null],[11,"create","","",41,{"inputs":[],"output":{"name":"ramdirectory"}}],[11,"open_read","","",41,null],[11,"open_write","","",41,null],[11,"atomic_write","","",41,null],[11,"sync","","",41,null],[11,"sync_directory","","",41,null],[11,"deref","","",37,null],[11,"len","","",37,null],[11,"as_slice","","",37,null],[11,"cursor","","",37,null],[11,"slice","","",37,null],[11,"clone","","",37,null],[6,"WritePtr","","",null,null],[8,"Directory","","There is currently two implementations of `Directory`\n- [RAMDirectory](index.html) ",null,null],[10,"open_read","","",42,null],[10,"open_write","","",42,null],[10,"atomic_write","","",42,null],[10,"sync","","Syncs the file if it exists\nIf it does not exists, just return Ok(())",42,null],[10,"sync_directory","","",42,null],[8,"SeekableWrite","","",null,null],[11,"fmt","","",38,null],[0,"collector","tantivy","",null,null],[3,"CountCollector","tantivy::collector","",null,null],[3,"MultiCollector","","",null,null],[3,"TopCollector","","",null,null],[3,"TestCollector","","",null,null],[3,"FastFieldTestCollector","","",null,null],[5,"chain","","",null,{"inputs":[],"output":{"name":"chainedcollector"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"countcollector"}}],[11,"count","","",43,null],[11,"set_segment","","",43,null],[11,"collect","","",43,null],[11,"from","","",44,{"inputs":[{"name":"vec"}],"output":{"name":"multicollector"}}],[11,"set_segment","","",44,null],[11,"collect","","",44,null],[11,"with_limit","","Creates a top collector, with a number of document of &quot;limit&quot;",45,{"inputs":[{"name":"usize"}],"output":{"name":"topcollector"}}],[11,"docs","","",45,null],[11,"score_docs","","",45,null],[11,"at_capacity","","",45,null],[11,"set_segment","","",45,null],[11,"collect","","",45,null],[8,"Collector","","",null,null],[10,"set_segment","","",46,null],[10,"collect","","",46,null],[11,"new","","",47,{"inputs":[],"output":{"name":"testcollector"}}],[11,"docs","","",47,null],[11,"set_segment","","",47,null],[11,"collect","","",47,null],[11,"for_field","","",48,{"inputs":[{"name":"field"}],"output":{"name":"fastfieldtestcollector"}}],[11,"vals","","",48,null],[11,"set_segment","","",48,null],[11,"collect","","",48,null],[0,"schema","tantivy","# Schema definition",null,null],[3,"NamedFieldDocument","tantivy::schema","",null,null],[12,"0","","",49,null],[3,"Schema","","Tantivy has a very strict schema.\nYou need to specify in advance, whether a field is indexed or not,\nstored or not, and RAM-based or not.",null,null],[3,"Document","","Tantivy&#39;s Document is the object that can\nbe indexed and then searched for.  ",null,null],[3,"Field","","",null,null],[12,"0","","",50,null],[3,"Term","","",null,null],[3,"FieldEntry","","",null,null],[3,"FieldValue","","",null,null],[12,"field","","",51,null],[12,"value","","",51,null],[3,"TextOptions","","",null,null],[3,"U32Options","","",null,null],[4,"Value","","",null,null],[13,"Str","","",52,null],[13,"U32","","",52,null],[4,"DocParsingError","","",null,null],[13,"NotJSON","","",53,null],[13,"NotJSONObject","","",53,null],[13,"MappingError","","",53,null],[13,"OverflowError","","",53,null],[13,"NoSuchFieldInSchema","","",53,null],[4,"FieldType","","",null,null],[13,"Str","","",54,null],[13,"U32","","",54,null],[4,"TextIndexingOptions","","",null,null],[13,"Unindexed","","",55,null],[13,"Untokenized","","",55,null],[13,"TokenizedNoFreq","","",55,null],[13,"TokenizedWithFreq","","",55,null],[13,"TokenizedWithFreqAndPosition","","",55,null],[5,"is_valid_field_name","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",56,null],[11,"clone","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"new","","Creates a new, empty schema.",56,{"inputs":[],"output":{"name":"schema"}}],[11,"get_field_entry","","",56,null],[11,"get_field_name","","",56,null],[11,"fields","","",56,null],[11,"get_field","","Returns the field options associated with a given name.",56,null],[11,"add_u32_field","","Creates a new field.\nReturn the associated field handle.",56,null],[11,"add_text_field","","",56,null],[11,"to_named_doc","","",56,null],[11,"parse_document","","Build a document object from a json-object.",56,null],[11,"fmt","","",53,null],[11,"from","","",53,{"inputs":[{"name":"parsererror"}],"output":{"name":"docparsingerror"}}],[11,"hash","tantivy","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"get_field","","",57,null],[11,"from_field_u32","","",57,{"inputs":[{"name":"field"},{"name":"u32"}],"output":{"name":"term"}}],[11,"from_field_text","","",57,{"inputs":[{"name":"field"},{"name":"str"}],"output":{"name":"term"}}],[11,"as_slice","","",57,null],[11,"from","","",57,null],[11,"as_ref","","",57,null],[11,"fmt","","",57,null],[11,"fmt","","",58,null],[11,"new","","",58,{"inputs":[],"output":{"name":"document"}}],[11,"len","","Returns the number of `(field, value)` pairs.",58,null],[11,"add_text","","Add a text field.",58,null],[11,"add_u32","","Add a u32 field",58,null],[11,"add","","",58,null],[11,"get_fields","","",58,null],[11,"get_sorted_fields","","",58,null],[11,"get_all","","",58,null],[11,"get_first","","",58,null],[11,"from","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"document"}}],[11,"encode","tantivy::schema","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"new_text","","",59,{"inputs":[{"name":"string"},{"name":"textoptions"}],"output":{"name":"fieldentry"}}],[11,"new_u32","","",59,{"inputs":[{"name":"string"},{"name":"u32options"}],"output":{"name":"fieldentry"}}],[11,"name","","",59,null],[11,"field_type","","",59,null],[11,"is_indexed","","",59,null],[11,"is_u32_fast","","",59,null],[11,"is_stored","","",59,null],[11,"encode","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",51,null],[11,"field","","",51,null],[11,"value","","",51,null],[11,"encode","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"get_indexing_options","","",60,null],[11,"is_stored","","",60,null],[11,"set_stored","","",60,null],[11,"set_indexing_options","","",60,null],[11,"new","","",60,{"inputs":[],"output":{"name":"textoptions"}}],[11,"hash","","",55,null],[11,"partial_cmp","","",55,null],[11,"eq","","",55,null],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"encode","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"is_termfreq_enabled","","",55,null],[11,"is_tokenized","","",55,null],[11,"is_indexed","","",55,null],[11,"is_position_enabled","","",55,null],[11,"bitor","","",55,null],[11,"bitor","","",60,null],[11,"encode","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"new","","",61,{"inputs":[],"output":{"name":"u32options"}}],[11,"is_stored","","",61,null],[11,"is_indexed","","",61,null],[11,"is_fast","","",61,null],[11,"set_stored","","",61,null],[11,"set_indexed","","",61,null],[11,"set_fast","","",61,null],[11,"hash","","",50,null],[11,"cmp","","",50,null],[11,"partial_cmp","","",50,null],[11,"lt","","",50,null],[11,"le","","",50,null],[11,"gt","","",50,null],[11,"ge","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"text","","",52,null],[11,"u32_value","","",52,null],[11,"from","","",52,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",52,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"encode","","",49,null],[17,"TEXT","","The field will be tokenized and indexed",null,null],[17,"STRING","","The field will be untokenized and indexed",null,null],[17,"STORED","","A stored fields of a document can be retrieved given its DocId.\nStored field are stored together and LZ4 compressed.\nReading the stored fields of a document is relatively slow.\n(100 microsecs)",null,null],[17,"FAST","","The field will be tokenized and indexed",null,null],[6,"Result","tantivy","",null,null],[6,"DocId","","u32 identifying a document within a segment.\nDocument gets their doc id assigned incrementally,\nas they are added in the segment.",null,null],[6,"Score","","f32 the score of a document.",null,null],[6,"SegmentLocalId","","A segment local id identifies a segment.\nIt only makes sense for a given searcher.",null,null],[8,"Directory","","There is currently two implementations of `Directory`\n- [RAMDirectory](index.html) ",null,null],[10,"open_read","","",42,null],[10,"open_write","","",42,null],[10,"atomic_write","","",42,null],[10,"sync","","Syncs the file if it exists\nIf it does not exists, just return Ok(())",42,null],[10,"sync_directory","","",42,null],[8,"DocSet","","",null,null],[10,"advance","","",20,null],[11,"skip_next","tantivy::postings","",20,null],[10,"doc","tantivy","",20,null],[11,"next","tantivy::postings","",20,null],[8,"Postings","tantivy","",null,null],[10,"term_freq","","",23,null],[10,"positions","","",23,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"segment_ord","","",0,null],[11,"doc","","",0,null],[11,"clone","","",62,null],[11,"score","","",62,null],[11,"doc","","",62,null],[11,"skip_next","tantivy::postings","",20,null],[11,"next","","",20,null]],"paths":[[3,"DocAddress"],[4,"Error"],[4,"SegmentPostingsOption"],[3,"Searcher"],[3,"Index"],[3,"SegmentReader"],[3,"TimerTree"],[3,"TermInfo"],[4,"SkipResult"],[3,"NothingRecorder"],[3,"TermFrequencyRecorder"],[3,"TFAndPositionRecorder"],[3,"PostingsSerializer"],[3,"SpecializedPostingsWriter"],[3,"ChainedPostings"],[3,"VecPostings"],[3,"SegmentPostings"],[3,"IntersectionDocSet"],[3,"OffsetPostings"],[3,"FreqHandler"],[8,"DocSet"],[8,"Recorder"],[8,"PostingsWriter"],[8,"Postings"],[8,"ScoredDocSet"],[8,"HasLen"],[4,"Occur"],[3,"MultiTermQuery"],[3,"SimilarityExplainer"],[3,"QueryParser"],[3,"Explanation"],[3,"TfIdf"],[3,"DAATMultiTermScorer"],[8,"Similarity"],[8,"Query"],[8,"Scorer"],[8,"MultiTermAccumulator"],[4,"ReadOnlySource"],[4,"OpenError"],[3,"MmapDirectory"],[3,"SharedVec"],[3,"RAMDirectory"],[8,"Directory"],[3,"CountCollector"],[3,"MultiCollector"],[3,"TopCollector"],[8,"Collector"],[3,"TestCollector"],[3,"FastFieldTestCollector"],[3,"NamedFieldDocument"],[3,"Field"],[3,"FieldValue"],[4,"Value"],[4,"DocParsingError"],[4,"FieldType"],[4,"TextIndexingOptions"],[3,"Schema"],[3,"Term"],[3,"Document"],[3,"FieldEntry"],[3,"TextOptions"],[3,"U32Options"],[3,"ScoredDoc"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary\nserialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec&lt;T&gt;`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"hash","","",2,null],[11,"cmp","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",3,null],[11,"hash","","",3,null],[11,"cmp","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,null],[11,"try_take","","Tries to take the value out of this refbox.",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,null],[11,"as_ref","","",2,null],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,null],[11,"try_take","","Tries to take the value out of this refbox.",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,null],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec&lt;T&gt;` from a `SliceBox`.",3,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,null],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec&lt;T&gt;`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,null],[11,"try_take","","Tries to take the value out of this refbox.",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,null],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions\nthat use the `rustc_serialize` crate for the encodable and decodable\nimplementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",5,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",5,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",6,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",6,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",6,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",7,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",7,null],[11,"read_nil","","",7,null],[11,"read_usize","","",7,null],[11,"read_u64","","",7,null],[11,"read_u32","","",7,null],[11,"read_u16","","",7,null],[11,"read_u8","","",7,null],[11,"read_isize","","",7,null],[11,"read_i64","","",7,null],[11,"read_i32","","",7,null],[11,"read_i16","","",7,null],[11,"read_i8","","",7,null],[11,"read_bool","","",7,null],[11,"read_f64","","",7,null],[11,"read_f32","","",7,null],[11,"read_char","","",7,null],[11,"read_str","","",7,null],[11,"read_enum","","",7,null],[11,"read_enum_variant","","",7,null],[11,"read_enum_variant_arg","","",7,null],[11,"read_enum_struct_variant","","",7,null],[11,"read_enum_struct_variant_field","","",7,null],[11,"read_struct","","",7,null],[11,"read_struct_field","","",7,null],[11,"read_tuple","","",7,null],[11,"read_tuple_arg","","",7,null],[11,"read_tuple_struct","","",7,null],[11,"read_tuple_struct_arg","","",7,null],[11,"read_option","","",7,null],[11,"read_seq","","",7,null],[11,"read_seq_elt","","",7,null],[11,"read_map","","",7,null],[11,"read_map_elt_key","","",7,null],[11,"read_map_elt_val","","",7,null],[11,"error","","",7,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"new","","",8,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",8,null],[11,"emit_usize","","",8,null],[11,"emit_u64","","",8,null],[11,"emit_u32","","",8,null],[11,"emit_u16","","",8,null],[11,"emit_u8","","",8,null],[11,"emit_isize","","",8,null],[11,"emit_i64","","",8,null],[11,"emit_i32","","",8,null],[11,"emit_i16","","",8,null],[11,"emit_i8","","",8,null],[11,"emit_bool","","",8,null],[11,"emit_f64","","",8,null],[11,"emit_f32","","",8,null],[11,"emit_char","","",8,null],[11,"emit_str","","",8,null],[11,"emit_enum","","",8,null],[11,"emit_enum_variant","","",8,null],[11,"emit_enum_variant_arg","","",8,null],[11,"emit_enum_struct_variant","","",8,null],[11,"emit_enum_struct_variant_field","","",8,null],[11,"emit_struct","","",8,null],[11,"emit_struct_field","","",8,null],[11,"emit_tuple","","",8,null],[11,"emit_tuple_arg","","",8,null],[11,"emit_tuple_struct","","",8,null],[11,"emit_tuple_struct_arg","","",8,null],[11,"emit_option","","",8,null],[11,"emit_option_none","","",8,null],[11,"emit_option_some","","",8,null],[11,"emit_seq","","",8,null],[11,"emit_seq_elt","","",8,null],[11,"emit_map","","",8,null],[11,"emit_map_elt_key","","",8,null],[11,"emit_map_elt_val","","",8,null],[11,"emit_nil","","",4,null],[11,"emit_usize","","",4,null],[11,"emit_u64","","",4,null],[11,"emit_u32","","",4,null],[11,"emit_u16","","",4,null],[11,"emit_u8","","",4,null],[11,"emit_isize","","",4,null],[11,"emit_i64","","",4,null],[11,"emit_i32","","",4,null],[11,"emit_i16","","",4,null],[11,"emit_i8","","",4,null],[11,"emit_bool","","",4,null],[11,"emit_f64","","",4,null],[11,"emit_f32","","",4,null],[11,"emit_char","","",4,null],[11,"emit_str","","",4,null],[11,"emit_enum","","",4,null],[11,"emit_enum_variant","","",4,null],[11,"emit_enum_variant_arg","","",4,null],[11,"emit_enum_struct_variant","","",4,null],[11,"emit_enum_struct_variant_field","","",4,null],[11,"emit_struct","","",4,null],[11,"emit_struct_field","","",4,null],[11,"emit_tuple","","",4,null],[11,"emit_tuple_arg","","",4,null],[11,"emit_tuple_struct","","",4,null],[11,"emit_tuple_struct_arg","","",4,null],[11,"emit_option","","",4,null],[11,"emit_option_none","","",4,null],[11,"emit_option_some","","",4,null],[11,"emit_seq","","",4,null],[11,"emit_seq_elt","","",4,null],[11,"emit_map","","",4,null],[11,"emit_map_elt_key","","",4,null],[11,"emit_map_elt_val","","",4,null],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions\nthat use the `serde` crate for the serialazble and deserializable\nimplementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",9,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",9,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",9,null],[13,"SyntaxError","","",9,null],[13,"EndOfStreamError","","",9,null],[13,"UnknownFieldError","","",9,null],[13,"MissingFieldError","","",9,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",10,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",10,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"fmt","","",9,null],[11,"description","","",9,null],[11,"cause","","",9,null],[11,"from","","",9,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",9,{"inputs":[{"name":"byteordererror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",9,null],[11,"syntax","","",9,{"inputs":[{"name":"str"}],"output":{"name":"deserializeerror"}}],[11,"end_of_stream","","",9,{"inputs":[],"output":{"name":"deserializeerror"}}],[11,"unknown_field","","",9,{"inputs":[{"name":"str"}],"output":{"name":"deserializeerror"}}],[11,"missing_field","","",9,{"inputs":[{"name":"str"}],"output":{"name":"deserializeerror"}}],[11,"new","","",11,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",11,null],[11,"visit","","",11,null],[11,"visit_bool","","",11,null],[11,"visit_u8","","",11,null],[11,"visit_u16","","",11,null],[11,"visit_u32","","",11,null],[11,"visit_u64","","",11,null],[11,"visit_usize","","",11,null],[11,"visit_i8","","",11,null],[11,"visit_i16","","",11,null],[11,"visit_i32","","",11,null],[11,"visit_i64","","",11,null],[11,"visit_isize","","",11,null],[11,"visit_f32","","",11,null],[11,"visit_f64","","",11,null],[11,"visit_unit","","",11,null],[11,"visit_char","","",11,null],[11,"visit_string","","",11,null],[11,"visit_enum","","",11,null],[11,"visit_tuple","","",11,null],[11,"visit_option","","",11,null],[11,"visit_seq","","",11,null],[11,"visit_map","","",11,null],[11,"visit_struct","","",11,null],[11,"visit_newtype_struct","","",11,null],[11,"visit_variant","","",11,null],[11,"visit_unit","","",11,null],[11,"visit_newtype","","",11,null],[11,"visit_tuple","","",11,null],[11,"visit_struct","","",11,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[11,"description","","",10,null],[11,"cause","","",10,null],[11,"new","","",12,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"visit_unit","","",12,null],[11,"visit_bool","","",12,null],[11,"visit_u8","","",12,null],[11,"visit_u16","","",12,null],[11,"visit_u32","","",12,null],[11,"visit_u64","","",12,null],[11,"visit_i8","","",12,null],[11,"visit_i16","","",12,null],[11,"visit_i32","","",12,null],[11,"visit_i64","","",12,null],[11,"visit_f32","","",12,null],[11,"visit_f64","","",12,null],[11,"visit_str","","",12,null],[11,"visit_none","","",12,null],[11,"visit_some","","",12,null],[11,"visit_seq","","",12,null],[11,"visit_tuple","","",12,null],[11,"visit_seq_elt","","",12,null],[11,"visit_map","","",12,null],[11,"visit_map_elt","","",12,null],[11,"visit_struct","","",12,null],[11,"visit_struct_elt","","",12,null],[11,"visit_newtype_struct","","",12,null],[11,"visit_unit_variant","","",12,null],[11,"visit_tuple_variant","","",12,null],[11,"visit_struct_variant","","",12,null],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"partial_cmp","bincode","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"Bytes","serde::bytes","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[3,"ByteBuf","","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",0,null],[11,"deref","","",0,null],[11,"serialize","","",0,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"hash","","",1,null],[11,"clone","","",1,null],[11,"new","","Construct a new, empty `ByteBuf`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",1,null],[11,"into","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"as_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"serialize","","",1,null],[11,"visit_unit","","",2,null],[11,"visit_seq","","",2,null],[11,"visit_bytes","","",2,null],[11,"visit_byte_buf","","",2,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::kind_mismatch`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&amp;str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PrimitiveVisitor","","A visitor that produces a primitive type.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[11,"visit_unit","","",4,null],[11,"visit_seq","","",4,null],[11,"visit_bool","","",5,null],[11,"visit_str","","",5,null],[11,"new","","Construct a new `PrimitiveVisitor`.",6,{"inputs":[],"output":{"name":"self"}}],[11,"visit_isize","","",6,null],[11,"visit_i8","","",6,null],[11,"visit_i16","","",6,null],[11,"visit_i32","","",6,null],[11,"visit_i64","","",6,null],[11,"visit_usize","","",6,null],[11,"visit_u8","","",6,null],[11,"visit_u16","","",6,null],[11,"visit_u32","","",6,null],[11,"visit_u64","","",6,null],[11,"visit_f32","","",6,null],[11,"visit_f64","","",6,null],[11,"visit_str","","",6,null],[11,"new","","Construct a new sequence visitor.",7,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",7,null],[11,"visit_seq","","",7,null],[11,"new","","Construct a new sequence visitor.",8,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",8,null],[11,"visit_seq","","",8,null],[11,"new","","Construct a new sequence visitor.",9,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",9,null],[11,"visit_seq","","",9,null],[11,"new","","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,null],[11,"visit_seq","","",10,null],[11,"new","","Construct a new sequence visitor.",11,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",11,null],[11,"visit_seq","","",11,null],[11,"new","","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,null],[11,"visit_seq","","",12,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",13,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",14,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",15,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",16,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",17,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",18,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",19,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",20,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",21,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",25,null],[11,"visit_map","","",25,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",26,null],[11,"visit_map","","",26,null],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"SyntaxError","","The value had some syntatic error.",27,null],[13,"EndOfStreamError","","EOF while deserializing a value.",27,null],[13,"UnknownFieldError","","Unknown field in struct.",27,null],[13,"MissingFieldError","","Struct is missing a field.",27,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",28,null],[10,"into_deserializer","","Convert this value into a deserializer.",28,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"syntax","","",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end_of_stream","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"unknown_field","","",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"visit","","",29,null],[11,"visit_option","","",29,null],[11,"visit","","",30,null],[11,"visit","","",31,null],[11,"visit","","",32,null],[11,"visit","","",33,null],[11,"visit","","",34,null],[11,"visit","","",35,null],[11,"visit","","",36,null],[11,"visit","","",37,null],[11,"visit","","",38,null],[11,"visit","","",39,null],[11,"visit","","",40,null],[11,"visit","","",41,null],[11,"visit","","",42,null],[11,"visit","","",43,null],[11,"visit","","",44,null],[11,"visit_enum","","",44,null],[11,"visit_variant","","",44,null],[11,"visit_unit","","",44,null],[11,"visit","","",45,null],[11,"visit_enum","","",45,null],[11,"visit_variant","","",45,null],[11,"visit_unit","","",45,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",46,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",46,null],[11,"visit","","",46,null],[11,"end","","",46,null],[11,"size_hint","","",46,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",47,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",47,null],[11,"visit_key","","",47,null],[11,"visit_value","","",47,null],[11,"end","","",47,null],[11,"size_hint","","",47,null],[11,"into_deserializer","serde::bytes","",0,null],[11,"visit","serde::de::value","",48,null],[11,"into_deserializer","serde::bytes","",1,null],[11,"visit","serde::de::value","",49,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"syntax","","Raised when there is general error when deserializing a type.",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"length_mismatch","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",50,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"type_mismatch","","Raised when a `Deserialize` was passed an incorrect type.",50,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",50,{"inputs":[],"output":{"name":"self"}}],[10,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[10,"missing_field","","Raised when a `Deserialize` struct type did not receive a field.",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",51,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",52,null],[10,"visit","","This method walks a visitor through a value as it is being deserialized.",52,null],[11,"visit_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",52,null],[11,"visit_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",52,null],[11,"visit_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",52,null],[11,"visit_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",52,null],[11,"visit_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",52,null],[11,"visit_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",52,null],[11,"visit_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",52,null],[11,"visit_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",52,null],[11,"visit_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",52,null],[11,"visit_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",52,null],[11,"visit_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",52,null],[11,"visit_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",52,null],[11,"visit_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",52,null],[11,"visit_char","","This method hints that the `Deserialize` type is expecting a `char` value.",52,null],[11,"visit_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",52,null],[11,"visit_string","","This method hints that the `Deserialize` type is expecting a `String` value.",52,null],[11,"visit_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",52,null],[11,"visit_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",52,null],[11,"visit_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",52,null],[11,"visit_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",52,null],[11,"visit_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",52,null],[11,"visit_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",52,null],[11,"visit_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",52,null],[11,"visit_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",52,null],[11,"visit_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",52,null],[11,"visit_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",52,null],[11,"visit_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",52,null],[11,"visit_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct key mapping.\nThis allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly deserialize a\nstruct key.",52,null],[11,"format","","Specify a format string for the deserializer.",52,{"inputs":[],"output":{"name":"str"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",53,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",53,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",53,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",53,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",53,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",53,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",53,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",53,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",53,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",53,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",53,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",53,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",53,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",53,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",53,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",53,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.",53,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",53,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",53,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",53,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",53,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",53,null],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",53,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",53,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",53,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",53,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",54,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",54,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",54,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",54,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",55,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",55,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",55,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",55,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",55,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",55,null],[11,"missing_field","","Report that there",55,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",56,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",56,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",57,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",57,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",57,null],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",57,null],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",57,null],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",57,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",58,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",58,null],[11,"col","","Report the current column inside the iterator.",58,null],[11,"get_ref","","Gets a reference to the underlying iterator.",58,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",58,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",58,null],[11,"peek","","peeks at the next value",58,null],[11,"next","","",58,null],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"new","","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",59,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",59,null],[11,"len","","",59,null],[11,"new","","Construct a new, empty `TupleVisitor`.",60,null],[11,"visit","","",60,null],[11,"len","","",60,null],[11,"new","","Construct a new, empty `TupleVisitor`.",61,null],[11,"visit","","",61,null],[11,"len","","",61,null],[11,"new","","Construct a new, empty `TupleVisitor`.",62,null],[11,"visit","","",62,null],[11,"len","","",62,null],[11,"new","","Construct a new, empty `TupleVisitor`.",63,null],[11,"visit","","",63,null],[11,"len","","",63,null],[11,"new","","Construct a new, empty `TupleVisitor`.",64,null],[11,"visit","","",64,null],[11,"len","","",64,null],[11,"new","","Construct a new, empty `TupleVisitor`.",65,null],[11,"visit","","",65,null],[11,"len","","",65,null],[11,"new","","Construct a new, empty `TupleVisitor`.",66,null],[11,"visit","","",66,null],[11,"len","","",66,null],[11,"new","","Construct a new, empty `TupleVisitor`.",67,null],[11,"visit","","",67,null],[11,"len","","",67,null],[11,"new","","Construct a new, empty `TupleVisitor`.",68,null],[11,"visit","","",68,null],[11,"len","","",68,null],[11,"new","","Construct a new, empty `TupleVisitor`.",69,null],[11,"visit","","",69,null],[11,"len","","",69,null],[11,"new","","Construct a new, empty `TupleVisitor`.",70,null],[11,"visit","","",70,null],[11,"len","","",70,null],[11,"new","","Construct a new, empty `TupleVisitor`.",71,null],[11,"visit","","",71,null],[11,"len","","",71,null],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",72,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",72,null],[11,"len","","",72,null],[8,"Serialize","serde::ser","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",73,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",74,null],[10,"visit_bool","","`visit_bool` serializes a `bool` value.",74,null],[11,"visit_isize","","`visit_isize` serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",74,null],[11,"visit_i8","","`visit_i8` serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",74,null],[11,"visit_i16","","`visit_i16` serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",74,null],[11,"visit_i32","","`visit_i32` serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",74,null],[10,"visit_i64","","`visit_i64` serializes a `i64` value.",74,null],[11,"visit_usize","","`visit_usize` serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `visit_u64` method.",74,null],[11,"visit_u8","","`visit_u8` serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",74,null],[11,"visit_u16","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",74,null],[11,"visit_u32","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",74,null],[10,"visit_u64","","`visit_u64` serializes a `u64` value.",74,null],[11,"visit_f32","","`visit_f32` serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `visit_f64` method.",74,null],[10,"visit_f64","","`visit_f64` serializes a `f64` value.",74,null],[11,"visit_char","","`visit_char` serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",74,null],[10,"visit_str","","`visit_str` serializes a `&amp;str`.",74,null],[11,"visit_bytes","","`visit_bytes` is a hook that enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",74,null],[10,"visit_unit","","Serializes a `()` value.",74,null],[11,"visit_unit_struct","","Serializes a unit struct value.",74,null],[11,"visit_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",74,null],[11,"visit_newtype_struct","","The `visit_newtype_struct` allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",74,null],[11,"visit_newtype_variant","","The `visit_newtype_variant` allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",74,null],[10,"visit_none","","Serializes a `None` value.",74,null],[10,"visit_some","","Serializes a `Some(...)` value.",74,null],[10,"visit_seq","","Serializes a sequence.",74,null],[10,"visit_seq_elt","","Serializes a sequence element.",74,null],[11,"visit_tuple","","Serializes a tuple.",74,null],[11,"visit_tuple_elt","","Serializes a tuple element.",74,null],[11,"visit_tuple_struct","","Serializes a tuple struct.",74,null],[11,"visit_tuple_struct_elt","","Serializes a tuple struct element.",74,null],[11,"visit_tuple_variant","","Serializes a tuple variant.",74,null],[11,"visit_tuple_variant_elt","","Serializes a tuple element.",74,null],[10,"visit_map","","Serializes a map.",74,null],[10,"visit_map_elt","","Serializes a map element (key-value pair).",74,null],[11,"visit_struct","","Serializes a struct.",74,null],[11,"visit_struct_elt","","Serializes an element of a struct.",74,null],[11,"visit_struct_variant","","Serializes a struct variant.",74,null],[11,"visit_struct_variant_elt","","Serializes an element of a struct variant.",74,null],[11,"format","","Specify a format string for the serializer.",74,{"inputs":[],"output":{"name":"str"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",75,null],[11,"len","","Return the length of the sequence if known.",75,null],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",76,null],[11,"len","","Return the length of the map if known.",76,null]],"paths":[[3,"Bytes"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PrimitiveVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"MapDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","",null,null],[6,"BigRational","","",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,null],[10,"mod_floor","","Floored integer modulo, satisfying:",1,null],[10,"gcd","","Greatest Common Divisor (GCD).",1,null],[10,"lcm","","Lowest Common Multiple (LCM).",1,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,null],[10,"is_even","","Returns `true` if the number is even.",1,null],[10,"is_odd","","Returns `true` if the number is odd.",1,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,null],[10,"abs_sub","","The positive difference of two numbers.",5,null],[10,"signum","","Returns the sign of the number.",5,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",7,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",7,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",8,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",9,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",10,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",11,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",12,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",12,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",12,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",12,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",12,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",12,null],[10,"swap_bytes","","Reverses the byte order of the integer.",12,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",12,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",12,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",13,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",13,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",13,null],[10,"floor","","Returns the largest integer less than or equal to a number.",13,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",13,null],[10,"trunc","","Return the integer part of a number.",13,null],[10,"fract","","Returns the fractional part of a number.",13,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",13,null],[10,"signum","","Returns a number that represents the sign of `self`.",13,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",13,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",13,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",13,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,null],[10,"powi","","Raise a number to an integer power.",13,null],[10,"powf","","Raise a number to a floating point power.",13,null],[10,"sqrt","","Take the square root of a number.",13,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,null],[10,"exp2","","Returns `2^(self)`.",13,null],[10,"ln","","Returns the natural logarithm of the number.",13,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,null],[10,"log2","","Returns the base 2 logarithm of the number.",13,null],[10,"log10","","Returns the base 10 logarithm of the number.",13,null],[11,"to_degrees","","Converts radians to degrees.",13,null],[11,"to_radians","","Converts degrees to radians.",13,null],[10,"max","","Returns the maximum of the two numbers.",13,null],[10,"min","","Returns the minimum of the two numbers.",13,null],[10,"abs_sub","","The positive difference of two numbers.",13,null],[10,"cbrt","","Take the cubic root of a number.",13,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",13,null],[10,"sin","","Computes the sine of a number (in radians).",13,null],[10,"cos","","Computes the cosine of a number (in radians).",13,null],[10,"tan","","Computes the tangent of a number (in radians).",13,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",13,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",13,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",13,null],[10,"sinh","","Hyperbolic sine function.",13,null],[10,"cosh","","Hyperbolic cosine function.",13,null],[10,"tanh","","Hyperbolic tangent function.",13,null],[10,"asinh","","Inverse hyperbolic sine function.",13,null],[10,"acosh","","Inverse hyperbolic cosine function.",13,null],[10,"atanh","","Inverse hyperbolic tangent function.",13,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",17,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",17,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",17,null],[11,"checked_add","","",17,null],[11,"checked_sub","","",17,null],[11,"checked_mul","","",17,null],[11,"checked_div","","",17,null],[11,"hash","","",18,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,null],[11,"eq","","",18,null],[11,"partial_cmp","","",18,null],[11,"cmp","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",18,null],[11,"bitand","","",18,null],[11,"bitor","","",18,null],[11,"bitor","","",18,null],[11,"bitxor","","",18,null],[11,"bitxor","","",18,null],[11,"shl","","",18,null],[11,"shr","","",18,null],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,null],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",18,null],[11,"add","","",18,null],[11,"sub","","",18,null],[11,"sub","","",18,null],[11,"mul","","",18,null],[11,"mul","","",18,null],[11,"div","","",18,null],[11,"div","","",18,null],[11,"rem","","",18,null],[11,"rem","","",18,null],[11,"neg","","",18,null],[11,"checked_add","","",18,null],[11,"checked_sub","","",18,null],[11,"checked_mul","","",18,null],[11,"checked_div","","",18,null],[11,"div_rem","","",18,null],[11,"div_floor","","",18,null],[11,"mod_floor","","",18,null],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,null],[11,"to_i64","","",18,null],[11,"to_u64","","",18,null],[11,"to_f32","","",18,null],[11,"to_f64","","",18,null],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",17,null],[11,"to_biguint","","",18,null],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",18,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,null],[11,"hash","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,null],[11,"eq","","",17,null],[11,"partial_cmp","","",17,null],[11,"cmp","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",17,null],[11,"shr","","",17,null],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,null],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",17,null],[11,"abs_sub","","",17,null],[11,"signum","","",17,null],[11,"is_positive","","",17,null],[11,"is_negative","","",17,null],[11,"add","","",17,null],[11,"add","","",17,null],[11,"sub","","",17,null],[11,"sub","","",17,null],[11,"mul","","",17,null],[11,"mul","","",17,null],[11,"div","","",17,null],[11,"div","","",17,null],[11,"rem","","",17,null],[11,"rem","","",17,null],[11,"neg","","",17,null],[11,"checked_add","","",17,null],[11,"checked_sub","","",17,null],[11,"checked_mul","","",17,null],[11,"checked_div","","",17,null],[11,"div_rem","","",17,null],[11,"div_floor","","",17,null],[11,"mod_floor","","",17,null],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,null],[11,"to_i64","","",17,null],[11,"to_u64","","",17,null],[11,"to_f32","","",17,null],[11,"to_f64","","",17,null],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",17,null],[11,"to_bigint","","",18,null],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,null],[11,"numer","","Gets an immutable reference to the numerator.",0,null],[11,"denom","","Gets an immutable reference to the denominator.",0,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,null],[11,"reduced","","Returns a `reduce`d copy of self.",0,null],[11,"recip","","Returns the reciprocal.",0,null],[11,"floor","","Rounds towards minus infinity.",0,null],[11,"ceil","","Rounds towards plus infinity.",0,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,null],[11,"trunc","","Rounds towards zero.",0,null],[11,"fract","","Returns the fractional part of a number.",0,null],[11,"pow","","Raises the ratio to the power of an exponent",0,null],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"rem","","",0,null],[11,"rem","","",0,null],[11,"neg","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,null],[11,"abs_sub","","",0,null],[11,"signum","","",0,null],[11,"is_positive","","",0,null],[11,"is_negative","","",0,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,null],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,null],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,null],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,null],[11,"bitand","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,null],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"div","","",5,null],[11,"div","","",5,null],[11,"rem","","",5,null],[11,"rem","","",5,null],[11,"neg","","",5,null],[11,"checked_add","","",5,null],[11,"checked_sub","","",5,null],[11,"checked_mul","","",5,null],[11,"checked_div","","",5,null],[11,"div_rem","","",5,null],[11,"div_floor","","",5,null],[11,"mod_floor","","",5,null],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,null],[11,"to_i64","","",5,null],[11,"to_u64","","",5,null],[11,"to_f32","","",5,null],[11,"to_f64","","",5,null],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,null],[11,"to_biguint","","",5,null],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"neg","","Negate Sign value.",0,null],[11,"mul","","",0,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,null],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,null],[11,"abs_sub","","",6,null],[11,"signum","","",6,null],[11,"is_positive","","",6,null],[11,"is_negative","","",6,null],[11,"add","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"rem","","",6,null],[11,"rem","","",6,null],[11,"neg","","",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"div_rem","","",6,null],[11,"div_floor","","",6,null],[11,"mod_floor","","",6,null],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,null],[11,"to_i64","","",6,null],[11,"to_u64","","",6,null],[11,"to_f32","","",6,null],[11,"to_f64","","",6,null],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,null],[11,"to_bigint","","",5,null],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID)",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID",null,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"clone","","",3,null],[11,"hash","","",3,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"nil","","Returns a nil or empty UUID (containing all zeroes)",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Create a new UUID of the specified version",3,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a new random UUID",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a UUID using the supplied field values",3,null],[11,"from_bytes","","Creates a UUID using the supplied bytes",3,null],[11,"get_variant","","Returns the variant of the UUID structure",3,null],[11,"get_version_num","","Returns the version number of the UUID",3,null],[11,"get_version","","Returns the version of the UUID",3,null],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"to_simple_string","","Returns the UUID as a string of 32 hexadecimal digits",3,null],[11,"to_hyphenated_string","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3,null],[11,"to_urn_string","","Returns the UUID formatted as a full URN string",3,null],[11,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,null],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a UUID",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"encode","","Encode a UUID as a hyphenated string",3,null],[11,"decode","","Decode a UUID from a string",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"fmt","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",25,null],[10,"read_nil","","",25,null],[10,"read_usize","","",25,null],[10,"read_u64","","",25,null],[10,"read_u32","","",25,null],[10,"read_u16","","",25,null],[10,"read_u8","","",25,null],[10,"read_isize","","",25,null],[10,"read_i64","","",25,null],[10,"read_i32","","",25,null],[10,"read_i16","","",25,null],[10,"read_i8","","",25,null],[10,"read_bool","","",25,null],[10,"read_f64","","",25,null],[10,"read_f32","","",25,null],[10,"read_char","","",25,null],[10,"read_str","","",25,null],[10,"read_enum","","",25,null],[10,"read_enum_variant","","",25,null],[10,"read_enum_variant_arg","","",25,null],[10,"read_enum_struct_variant","","",25,null],[10,"read_enum_struct_variant_field","","",25,null],[10,"read_struct","","",25,null],[10,"read_struct_field","","",25,null],[10,"read_tuple","","",25,null],[10,"read_tuple_arg","","",25,null],[10,"read_tuple_struct","","",25,null],[10,"read_tuple_struct_arg","","",25,null],[10,"read_option","","",25,null],[10,"read_seq","","",25,null],[10,"read_seq_elt","","",25,null],[10,"read_map","","",25,null],[10,"read_map_elt_key","","",25,null],[10,"read_map_elt_val","","",25,null],[10,"error","","",25,null],[8,"Encoder","","",null,null],[16,"Error","","",26,null],[10,"emit_nil","","",26,null],[10,"emit_usize","","",26,null],[10,"emit_u64","","",26,null],[10,"emit_u32","","",26,null],[10,"emit_u16","","",26,null],[10,"emit_u8","","",26,null],[10,"emit_isize","","",26,null],[10,"emit_i64","","",26,null],[10,"emit_i32","","",26,null],[10,"emit_i16","","",26,null],[10,"emit_i8","","",26,null],[10,"emit_bool","","",26,null],[10,"emit_f64","","",26,null],[10,"emit_f32","","",26,null],[10,"emit_char","","",26,null],[10,"emit_str","","",26,null],[10,"emit_enum","","",26,null],[10,"emit_enum_variant","","",26,null],[10,"emit_enum_variant_arg","","",26,null],[10,"emit_enum_struct_variant","","",26,null],[10,"emit_enum_struct_variant_field","","",26,null],[10,"emit_struct","","",26,null],[10,"emit_struct_field","","",26,null],[10,"emit_tuple","","",26,null],[10,"emit_tuple_arg","","",26,null],[10,"emit_tuple_struct","","",26,null],[10,"emit_tuple_struct_arg","","",26,null],[10,"emit_option","","",26,null],[10,"emit_option_none","","",26,null],[10,"emit_option_some","","",26,null],[10,"emit_seq","","",26,null],[10,"emit_seq_elt","","",26,null],[10,"emit_map","","",26,null],[10,"emit_map_elt_key","","",26,null],[10,"emit_map_elt_val","","",26,null],[8,"Decodable","","",null,null],[10,"decode","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",28,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",29,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["fst"] = {"doc":"Crate `fst` is a library for efficiently storing and searching ordered sets or\nmaps where the keys are byte strings. A key design goal of this crate is to\nsupport storing and searching *very large* sets or maps (i.e., billions). This\nmeans that much effort has gone in to making sure that all operations are\nmemory efficient.","items":[[3,"Levenshtein","fst","A Unicode aware Levenshtein automaton for running efficient fuzzy queries.",null,null],[3,"Map","","Map is a lexicographically ordered map from byte strings to integers.",null,null],[3,"MapBuilder","","A builder for creating a map.",null,null],[3,"Regex","","A regular expression for searching FSTs with Unicode support.",null,null],[3,"Set","","Set is a lexicographically ordered set of byte strings.",null,null],[3,"SetBuilder","","A builder for creating a set.",null,null],[4,"Error","","An error that encapsulates all possible errors in this crate.",null,null],[13,"Fst","","An error that occurred while reading or writing a finite state\ntransducer.",0,null],[13,"Regex","","An error that occurred while compiling a regular expression.",0,null],[13,"Levenshtein","","An error that occurred while building a Levenshtein automaton.",0,null],[13,"Io","","An IO error that occurred while writing a finite state transducer.",0,null],[4,"LevenshteinError","","An error that occurred while building a Levenshtein automaton.",null,null],[13,"TooManyStates","","If construction of the automaton reaches some hard-coded limit\non the number of states, then this error is returned.",1,null],[4,"RegexError","","An error that occurred while compiling a regular expression.",null,null],[13,"Syntax","","A problem with the syntax of a regular expression.",2,null],[13,"CompiledTooBig","","Too many instructions resulting from the regular expression.",2,null],[13,"TooManyStates","","Too many automata states resulting from the regular expression.",2,null],[13,"NoLazy","","Lazy quantifiers are not allowed (because they have no useful\ninterpretation when used purely for automata intersection, as is the\ncase in this crate).",2,null],[13,"NoWordBoundary","","Word boundaries are currently not allowed.",2,null],[13,"NoEmpty","","Empty or &quot;zero width assertions&quot; such as `^` or `$` are currently\nnot allowed.",2,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"regexerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"levenshteinerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"new","","Create a new Levenshtein query.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"start","","",3,null],[11,"is_match","","",3,null],[11,"can_match","","",3,null],[11,"accept","","",3,null],[11,"from_path","","Opens a map stored at the given file path via a memory map.",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_bytes","","Creates a map from its representation as a raw byte sequence.",4,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_iter","","Create a `Map` from an iterator of lexicographically ordered byte\nstrings and associated values.",4,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"contains_key","","Tests the membership of a single key.",4,null],[11,"get","","Retrieves the value associated with a key.",4,null],[11,"stream","","Return a lexicographically ordered stream of all key-value pairs in\nthis map.",4,null],[11,"keys","","Return a lexicographically ordered stream of all keys in this map.",4,null],[11,"values","","Return a stream of all values in this map ordered lexicographically\nby each value&#39;s corresponding key.",4,null],[11,"range","","Return a builder for range queries.",4,null],[11,"search","","Executes an automaton on the keys of this map.",4,null],[11,"len","","Returns the number of elements in this map.",4,null],[11,"is_empty","","Returns true if and only if this map is empty.",4,null],[11,"op","","Creates a new map operation with this map added to it.",4,null],[11,"as_fst","","Returns a reference to the underlying raw finite state transducer.",4,null],[11,"fmt","","",4,null],[11,"from","","",4,{"inputs":[{"name":"fst"}],"output":{"name":"map"}}],[11,"as_ref","","",4,null],[11,"memory","","Create a builder that builds a map in memory.",5,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a builder that builds a map by writing it to `wtr` in a\nstreaming fashion.",5,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"insert","","Insert a new key-value pair into the map.",5,null],[11,"extend_iter","","Calls insert on each item in the iterator.",5,null],[11,"extend_stream","","Calls insert on each item in the stream.",5,null],[11,"finish","","Finishes the construction of the map and flushes the underlying\nwriter. After completion, the data written to `W` may be read using\none of `Map`&#39;s constructor methods.",5,null],[11,"into_inner","","Just like `finish`, except it returns the underlying writer after\nflushing it.",5,null],[0,"raw","","Operations on raw finite state transducers.",null,null],[3,"Builder","fst::raw","A builder for creating a finite state transducer.",null,null],[3,"Node","","Node represents a single state in a finite state transducer.",null,null],[3,"Transitions","","An iterator over all transitions in a node.",null,null],[3,"MmapReadOnly","","A read only view into a memory map.",null,null],[3,"IndexedValue","","A value indexed by a stream.",null,null],[12,"index","","The index of the stream that produced this value (starting at `0`).",6,null],[12,"value","","The value.",6,null],[3,"OpBuilder","","A builder for collecting fst streams on which to perform set operations\non the keys of fsts.",null,null],[3,"Intersection","","A stream of set intersection over multiple fst streams in lexicographic\norder.",null,null],[3,"Union","","A stream of set union over multiple fst streams in lexicographic order.",null,null],[3,"Difference","","A stream of set difference over multiple fst streams in lexicographic\norder.",null,null],[3,"SymmetricDifference","","A stream of set symmetric difference over multiple fst streams in\nlexicographic order.",null,null],[3,"Fst","","An acyclic deterministic finite state transducer.",null,null],[3,"StreamBuilder","","A builder for constructing range queries on streams.",null,null],[3,"Stream","","A lexicographically ordered stream of key-value pairs from an fst.",null,null],[3,"Output","","An output is a value that is associated with a key in a finite state\ntransducer.",null,null],[3,"Transition","","A transition from one note to another.",null,null],[12,"inp","","The byte input associated with this transition.",7,null],[12,"out","","The output associated with this transition.",7,null],[12,"addr","","The address of the node that this transition points to.",7,null],[4,"Error","","An error that occurred while using a finite state transducer.",null,null],[13,"Version","","A version mismatch occurred while reading a finite state transducer.",8,null],[12,"expected","fst::raw::Error","The expected version, which is hard-coded into the current version\nof this crate.",8,null],[12,"got","","The version read from the finite state transducer.",8,null],[13,"Format","fst::raw","An unexpected error occurred while reading a finite state transducer.\nUsually this occurs because the data is corrupted or is not actually\na finite state transducer serialized by this library.",8,null],[13,"DuplicateKey","","A duplicate key was inserted into a finite state transducer, which is\nnot allowed.",8,null],[12,"got","fst::raw::Error","The duplicate key.",8,null],[13,"OutOfOrder","fst::raw","A key was inserted out of order into a finite state transducer.",8,null],[12,"previous","fst::raw::Error","The last key successfully inserted.",8,null],[12,"got","","The key that caused this error to occur.",8,null],[13,"WrongType","fst::raw","A finite state transducer with an unexpected type was found.",8,null],[12,"expected","fst::raw::Error","The expected finite state transducer type.",8,null],[12,"got","","The type read from a finite state transducer.",8,null],[13,"FromUtf8","fst::raw","An error that occurred when trying to decode a UTF-8 byte key.",8,null],[11,"memory","","Create a builder that builds an fst in memory.",9,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a builder that builds an fst by writing it to `wtr` in a\nstreaming fashion.",9,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"new_type","","The same as `new`, except it sets the type of the fst to the type\ngiven.",9,{"inputs":[{"name":"w"},{"name":"fsttype"}],"output":{"name":"result"}}],[11,"add","","Adds a byte string to this FST with a zero output value.",9,null],[11,"insert","","Insert a new key-value pair into the fst.",9,null],[11,"extend_iter","","Calls insert on each item in the iterator.",9,null],[11,"extend_stream","","Calls insert on each item in the stream.",9,null],[11,"finish","","Finishes the construction of the fst and flushes the underlying\nwriter. After completion, the data written to `W` may be read using\none of `Fst`&#39;s constructor methods.",9,null],[11,"into_inner","","Just like `finish`, except it returns the underlying writer after\nflushing it.",9,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[11,"cause","","",8,null],[11,"from","","",8,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"open","","Create a new memory map from an existing file handle.",10,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"open_path","","Open a new memory map from the path given.",10,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"len","","Returns the size in byte of the memory map.",10,null],[11,"range","","Slice this memory map to a new `offset` and `len`.",10,null],[11,"as_slice","","Read the memory map as a `&amp;[u8]`.",10,null],[11,"clone","","",10,null],[11,"from","","",10,{"inputs":[{"name":"mmap"}],"output":{"name":"mmapreadonly"}}],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"transitions","","Returns an iterator over all transitions in this node in lexicographic\norder.",11,null],[11,"transition","","Returns the transition at index `i`.",11,null],[11,"transition_addr","","Returns the transition address of the `i`th transition.",11,null],[11,"find_input","","Finds the `i`th transition corresponding to the given input byte.",11,null],[11,"final_output","","If this node is final and has a terminal output value, then it is\nreturned. Otherwise, a zero output is returned.",11,null],[11,"is_final","","Returns true if and only if this node corresponds to a final or &quot;match&quot;\nstate in the finite state transducer.",11,null],[11,"len","","Returns the number of transitions in this node.",11,null],[11,"is_empty","","Returns true if and only if this node has zero transitions.",11,null],[11,"addr","","Return the address of this node.",11,null],[11,"next","","",12,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"cmp","","",6,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"new","","Create a new set operation builder.",13,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Add a stream to this set operation.",13,null],[11,"push","","Add a stream to this set operation.",13,null],[11,"union","","Performs a union operation on all streams that have been added.",13,null],[11,"intersection","","Performs an intersection operation on all streams that have been added.",13,null],[11,"difference","","Performs a difference operation with respect to the first stream added.\nThat is, this returns a stream of all elements in the first stream\nthat don&#39;t exist in any other stream that has been added.",13,null],[11,"symmetric_difference","","Performs a symmetric difference operation on all of the streams that\nhave been added.",13,null],[11,"extend","","",13,null],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"next","","",15,null],[11,"next","","",16,null],[11,"next","","",17,null],[6,"FstType","","FstType is a convention used to indicate the type of the underlying\ntransducer.",null,null],[6,"CompiledAddr","","CompiledAddr is the type used to address nodes in a finite state\ntransducer.",null,null],[17,"VERSION","","The API version of this crate.",null,null],[11,"from_path","","Opens a transducer stored at the given file path via a memory map.",18,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_mmap","","Opens a transducer from a `MmapReadOnly`.",18,{"inputs":[{"name":"mmapreadonly"}],"output":{"name":"result"}}],[11,"from_bytes","","Creates a transducer from its representation as a raw byte sequence.",18,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_static_slice","","Creates a transducer from its representation as a raw byte sequence.",18,null],[11,"get","","Retrieves the value associated with a key.",18,null],[11,"contains_key","","Returns true if and only if the given key is in this FST.",18,null],[11,"stream","","Return a lexicographically ordered stream of all key-value pairs in\nthis fst.",18,null],[11,"range","","Return a builder for range queries.",18,null],[11,"search","","Executes an automaton on the keys of this map.",18,null],[11,"len","","Returns the number of keys in this fst.",18,null],[11,"is_empty","","Returns true if and only if this fst has no keys.",18,null],[11,"size","","Returns the number of bytes used by this fst.",18,null],[11,"op","","Creates a new fst operation with this fst added to it.",18,null],[11,"is_disjoint","","Returns true if and only if the `self` fst is disjoint with the fst\n`stream`.",18,null],[11,"is_subset","","Returns true if and only if the `self` fst is a subset of the fst\n`stream`.",18,null],[11,"is_superset","","Returns true if and only if the `self` fst is a superset of the fst\n`stream`.",18,null],[11,"fst_type","","Returns the underlying type of this fst.",18,null],[11,"root","","Returns the root node of this fst.",18,null],[11,"node","","Returns the node at the given address.",18,null],[11,"ge","","Specify a greater-than-or-equal-to bound.",19,null],[11,"gt","","Specify a greater-than bound.",19,null],[11,"le","","Specify a less-than-or-equal-to bound.",19,null],[11,"lt","","Specify a less-than bound.",19,null],[11,"into_stream","","",19,null],[11,"into_byte_vec","","Convert this stream into a vector of byte strings and outputs.",20,null],[11,"into_str_vec","","Convert this stream into a vector of Unicode strings and outputs.",20,null],[11,"into_byte_keys","","Convert this stream into a vector of byte strings.",20,null],[11,"into_str_keys","","Convert this stream into a vector of Unicode strings.",20,null],[11,"into_values","","Convert this stream into a vector of outputs.",20,null],[11,"next","","",20,null],[11,"partial_cmp","","",21,null],[11,"lt","","",21,null],[11,"le","","",21,null],[11,"gt","","",21,null],[11,"ge","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"cmp","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"new","","Create a new output from a `u64`.",21,{"inputs":[{"name":"u64"}],"output":{"name":"output"}}],[11,"zero","","Create a zero output.",21,{"inputs":[],"output":{"name":"output"}}],[11,"value","","Retrieve the value inside this output.",21,null],[11,"is_zero","","Returns true if this is a zero output.",21,null],[11,"prefix","","Returns the prefix of this output and `o`.",21,null],[11,"cat","","Returns the concatenation of this output and `o`.",21,null],[11,"sub","","Returns the subtraction of `o` from this output.",21,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"hash","","",7,null],[11,"clone","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",7,null],[11,"fmt","fst","",2,null],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"new","","Create a new regular expression query.",22,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"start","","",22,null],[11,"is_match","","",22,null],[11,"can_match","","",22,null],[11,"accept","","",22,null],[11,"fmt","","",22,null],[11,"from_path","","Opens a set stored at the given file path via a memory map.",23,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_bytes","","Creates a set from its representation as a raw byte sequence.",23,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_iter","","Create a `Set` from an iterator of lexicographically ordered byte\nstrings.",23,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"contains","","Tests the membership of a single key.",23,null],[11,"stream","","Return a lexicographically ordered stream of all keys in this set.",23,null],[11,"range","","Return a builder for range queries.",23,null],[11,"search","","Executes an automaton on the keys of this set.",23,null],[11,"len","","Returns the number of elements in this set.",23,null],[11,"is_empty","","Returns true if and only if this set is empty.",23,null],[11,"op","","Creates a new set operation with this set added to it.",23,null],[11,"is_disjoint","","Returns true if and only if the `self` set is disjoint with the set\n`stream`.",23,null],[11,"is_subset","","Returns true if and only if the `self` set is a subset of `stream`.",23,null],[11,"is_superset","","Returns true if and only if the `self` set is a superset of `stream`.",23,null],[11,"as_fst","","Returns a reference to the underlying raw finite state transducer.",23,null],[11,"fmt","","",23,null],[11,"as_ref","","",23,null],[11,"from","","",23,{"inputs":[{"name":"fst"}],"output":{"name":"set"}}],[11,"memory","","Create a builder that builds a set in memory.",24,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a builder that builds a set by writing it to `wtr` in a\nstreaming fashion.",24,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"insert","","Insert a new key into the set.",24,null],[11,"extend_iter","","Calls insert on each item in the iterator.",24,null],[11,"extend_stream","","Calls insert on each item in the stream.",24,null],[11,"finish","","Finishes the construction of the set and flushes the underlying\nwriter. After completion, the data written to `W` may be read using\none of `Set`&#39;s constructor methods.",24,null],[11,"into_inner","","Just like `finish`, except it returns the underlying writer after\nflushing it.",24,null],[0,"map","","Map operations implemented by finite state transducers.",null,null],[3,"IndexedValue","fst::map","A value indexed by a stream.",null,null],[12,"index","","The index of the stream that produced this value (starting at `0`).",6,null],[12,"value","","The value.",6,null],[3,"Map","","Map is a lexicographically ordered map from byte strings to integers.",null,null],[3,"MapBuilder","","A builder for creating a map.",null,null],[3,"Stream","","A lexicographically ordered stream of key-value pairs from a map.",null,null],[3,"Keys","","A lexicographically ordered stream of keys from a map.",null,null],[3,"Values","","A stream of values from a map, lexicographically ordered by each value&#39;s\ncorresponding key.",null,null],[3,"StreamBuilder","","A builder for constructing range queries on streams.",null,null],[3,"OpBuilder","","A builder for collecting map streams on which to perform set operations\non the keys of maps.",null,null],[3,"Union","","A stream of set union over multiple map streams in lexicographic order.",null,null],[3,"Intersection","","A stream of set intersection over multiple map streams in lexicographic\norder.",null,null],[3,"Difference","","A stream of set difference over multiple map streams in lexicographic\norder.",null,null],[3,"SymmetricDifference","","A stream of set symmetric difference over multiple map streams in\nlexicographic order.",null,null],[0,"set","fst","Set operations implemented by finite state transducers.",null,null],[3,"Set","fst::set","Set is a lexicographically ordered set of byte strings.",null,null],[3,"SetBuilder","","A builder for creating a set.",null,null],[3,"Stream","","A lexicographically ordered stream of keys from a set.",null,null],[3,"StreamBuilder","","A builder for constructing range queries on streams.",null,null],[3,"OpBuilder","","A builder for collecting set streams on which to perform set operations.",null,null],[3,"Union","","A stream of set union over multiple streams in lexicographic order.",null,null],[3,"Intersection","","A stream of set intersection over multiple streams in lexicographic order.",null,null],[3,"Difference","","A stream of set difference over multiple streams in lexicographic order.",null,null],[3,"SymmetricDifference","","A stream of set symmetric difference over multiple streams in lexicographic\norder.",null,null],[6,"Result","fst","A `Result` type alias for this crate&#39;s `Error` type.",null,null],[8,"Automaton","","Automaton describes types that behave as a finite automaton.",null,null],[16,"State","","The type of the state used in the automaton.",25,null],[10,"start","","Returns a single start state for this automaton.",25,null],[10,"is_match","","Returns true if and only if `state` is a match state.",25,null],[11,"can_match","","Returns true if and only if `state` can lead to a match in zero or more\nsteps.",25,null],[11,"will_always_match","","Returns true if and only if `state` matches and must match no matter what\nsteps are taken.",25,null],[10,"accept","","Return the next state given `state` and an input.",25,null],[11,"starts_with","","Returns an automaton that matches the strings that start with something\nthis automaton matches.",25,null],[11,"union","","Returns an automaton that matches the strings matched by either this or\nthe other automaton.",25,null],[11,"intersection","","Returns an automaton that matches the strings matched by both this and\nthe other automaton.",25,null],[11,"complement","","Returns an automaton that matches the strings not matched by this automaton.",25,null],[8,"IntoStreamer","","IntoStreamer describes types that can be converted to streams.",null,null],[16,"Item","","The type of the item emitted by the stream.",26,null],[16,"Into","","The type of the stream to be constructed.",26,null],[10,"into_stream","","Construct a stream from `Self`.",26,null],[8,"Streamer","","Streamer describes a &quot;streaming iterator.&quot;",null,null],[16,"Item","","The type of the item emitted by this stream.",27,null],[10,"next","","Emits the next element in this stream, or `None` to indicate the stream\nhas been exhausted.",27,null],[11,"can_match","","Returns true if and only if `state` can lead to a match in zero or more\nsteps.",25,null],[11,"will_always_match","","Returns true if and only if `state` matches and must match no matter what\nsteps are taken.",25,null],[11,"starts_with","","Returns an automaton that matches the strings that start with something\nthis automaton matches.",25,null],[11,"union","","Returns an automaton that matches the strings matched by either this or\nthe other automaton.",25,null],[11,"intersection","","Returns an automaton that matches the strings matched by both this and\nthe other automaton.",25,null],[11,"complement","","Returns an automaton that matches the strings not matched by this automaton.",25,null],[11,"next","fst::map","",28,null],[11,"into_byte_vec","","Convert this stream into a vector of byte strings and outputs.",28,null],[11,"into_str_vec","","Convert this stream into a vector of Unicode strings and outputs.",28,null],[11,"into_byte_keys","","Convert this stream into a vector of byte strings.",28,null],[11,"into_str_keys","","Convert this stream into a vector of Unicode strings.",28,null],[11,"into_values","","Convert this stream into a vector of outputs.",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"ge","","Specify a greater-than-or-equal-to bound.",31,null],[11,"gt","","Specify a greater-than bound.",31,null],[11,"le","","Specify a less-than-or-equal-to bound.",31,null],[11,"lt","","Specify a less-than bound.",31,null],[11,"into_stream","","",31,null],[11,"new","","Create a new set operation builder.",32,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Add a stream to this set operation.",32,null],[11,"push","","Add a stream to this set operation.",32,null],[11,"union","","Performs a union operation on all streams that have been added.",32,null],[11,"intersection","","Performs an intersection operation on all streams that have been added.",32,null],[11,"difference","","Performs a difference operation with respect to the first stream added.\nThat is, this returns a stream of all elements in the first stream\nthat don&#39;t exist in any other stream that has been added.",32,null],[11,"symmetric_difference","","Performs a symmetric difference operation on all of the streams that\nhave been added.",32,null],[11,"extend","","",32,null],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"next","","",33,null],[11,"next","","",34,null],[11,"next","","",35,null],[11,"next","","",36,null],[11,"into_strs","fst::set","Convert this stream into a vector of Unicode strings.",37,null],[11,"into_bytes","","Convert this stream into a vector of byte strings.",37,null],[11,"next","","",37,null],[11,"ge","","Specify a greater-than-or-equal-to bound.",38,null],[11,"gt","","Specify a greater-than bound.",38,null],[11,"le","","Specify a less-than-or-equal-to bound.",38,null],[11,"lt","","Specify a less-than bound.",38,null],[11,"into_stream","","",38,null],[11,"new","","Create a new set operation builder.",39,{"inputs":[],"output":{"name":"self"}}],[11,"add","","Add a stream to this set operation.",39,null],[11,"push","","Add a stream to this set operation.",39,null],[11,"union","","Performs a union operation on all streams that have been added.",39,null],[11,"intersection","","Performs an intersection operation on all streams that have been added.",39,null],[11,"difference","","Performs a difference operation with respect to the first stream added.\nThat is, this returns a stream of all elements in the first stream\nthat don&#39;t exist in any other stream that has been added.",39,null],[11,"symmetric_difference","","Performs a symmetric difference operation on all of the streams that\nhave been added.",39,null],[11,"extend","","",39,null],[11,"from_iter","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"next","","",40,null],[11,"next","","",41,null],[11,"next","","",42,null],[11,"next","","",43,null]],"paths":[[4,"Error"],[4,"LevenshteinError"],[4,"RegexError"],[3,"Levenshtein"],[3,"Map"],[3,"MapBuilder"],[3,"IndexedValue"],[3,"Transition"],[4,"Error"],[3,"Builder"],[3,"MmapReadOnly"],[3,"Node"],[3,"Transitions"],[3,"OpBuilder"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Fst"],[3,"StreamBuilder"],[3,"Stream"],[3,"Output"],[3,"Regex"],[3,"Set"],[3,"SetBuilder"],[8,"Automaton"],[8,"IntoStreamer"],[8,"Streamer"],[3,"Stream"],[3,"Keys"],[3,"Values"],[3,"StreamBuilder"],[3,"OpBuilder"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Stream"],[3,"StreamBuilder"],[3,"OpBuilder"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["lz4"] = {"doc":"","items":[[3,"Decoder","lz4","",null,null],[3,"Encoder","","",null,null],[3,"EncoderBuilder","","",null,null],[0,"liblz4","","",null,null],[3,"LZ4Error","lz4::liblz4","",null,null],[3,"LZ4FFrameInfo","","",null,null],[12,"block_size_id","","",0,null],[12,"block_mode","","",0,null],[12,"content_checksum_flag","","",0,null],[12,"reserved","","",0,null],[3,"LZ4FPreferences","","",null,null],[12,"frame_info","","",1,null],[12,"compression_level","","",1,null],[12,"auto_flush","","",1,null],[12,"reserved","","",1,null],[3,"LZ4FCompressOptions","","",null,null],[12,"stable_src","","",2,null],[12,"reserved","","",2,null],[3,"LZ4FDecompressOptions","","",null,null],[12,"stable_dst","","",3,null],[12,"reserved","","",3,null],[3,"LZ4StreamEncode","","",null,null],[3,"LZ4StreamDecode","","",null,null],[4,"BlockSize","","",null,null],[13,"Default","","",4,null],[13,"Max64KB","","",4,null],[13,"Max256KB","","",4,null],[13,"Max1MB","","",4,null],[13,"Max4MB","","",4,null],[4,"BlockMode","","",null,null],[13,"Linked","","",5,null],[13,"Independent","","",5,null],[4,"ContentChecksum","","",null,null],[13,"NoChecksum","","",6,null],[13,"ChecksumEnabled","","",6,null],[5,"check_error","","",null,{"inputs":[{"name":"lz4ferrorcode"}],"output":{"name":"result"}}],[5,"version","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"LZ4F_isError","","",null,null],[5,"LZ4F_getErrorName","","",null,null],[5,"LZ4F_createCompressionContext","","",null,null],[5,"LZ4F_freeCompressionContext","","",null,null],[5,"LZ4F_compressBegin","","",null,null],[5,"LZ4F_compressBound","","",null,null],[5,"LZ4F_compressUpdate","","",null,null],[5,"LZ4F_flush","","",null,null],[5,"LZ4F_compressEnd","","",null,null],[5,"LZ4F_createDecompressionContext","","",null,null],[5,"LZ4F_freeDecompressionContext","","",null,null],[5,"LZ4F_getFrameInfo","","",null,null],[5,"LZ4F_decompress","","",null,null],[5,"LZ4_versionNumber","","",null,null],[5,"LZ4_compressBound","","",null,null],[5,"LZ4_createStream","","",null,null],[5,"LZ4_compress_continue","","",null,null],[5,"LZ4_freeStream","","",null,null],[5,"LZ4_createStreamDecode","","",null,null],[5,"LZ4_decompress_safe_continue","","",null,null],[5,"LZ4_freeStreamDecode","","",null,null],[6,"LZ4FCompressionContext","","",null,null],[6,"LZ4FDecompressionContext","","",null,null],[6,"LZ4FErrorCode","","",null,null],[17,"LZ4F_VERSION","","",null,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"cause","","",7,null],[11,"clone","","",4,null],[11,"get_size","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"new","lz4","Creates a new encoder which will have its output written to the given\noutput stream. The output stream can be re-acquired by calling\n`finish()`",8,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"reader","","Immutable reader reference.",8,null],[11,"finish","","",8,null],[11,"read","","",8,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"block_size","","",9,null],[11,"block_mode","","",9,null],[11,"checksum","","",9,null],[11,"level","","",9,null],[11,"auto_flush","","",9,null],[11,"build","","",9,null],[11,"writer","","Immutable writer reference.",10,null],[11,"finish","","This function is used to flag that this session of compression is done\nwith. The stream is finished up (final bytes are written), and then the\nwrapped writer is returned.",10,null],[11,"write","","",10,null],[11,"flush","","",10,null]],"paths":[[3,"LZ4FFrameInfo"],[3,"LZ4FPreferences"],[3,"LZ4FCompressOptions"],[3,"LZ4FDecompressOptions"],[4,"BlockSize"],[4,"BlockMode"],[4,"ContentChecksum"],[3,"LZ4Error"],[3,"Decoder"],[3,"EncoderBuilder"],[3,"Encoder"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"clone","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory maps.","items":[[3,"MmapOptions","memmap","",null,null],[12,"stack","","Indicates that the memory map should be suitable for a stack.",0,null],[3,"Mmap","","A memory-mapped buffer.",null,null],[3,"MmapView","","A view of a memory map.",null,null],[3,"MmapViewSync","","A thread-safe view of a memory map.",null,null],[4,"Protection","","Memory map protection.",null,null],[13,"Read","","A read-only memory map. Writes to the memory map will result in a panic.",1,null],[13,"ReadWrite","","A read-write memory map. Writes to the memory map will be reflected in\nthe file after a call to `Mmap::flush` or after the `Mmap` is dropped.",1,null],[13,"ReadCopy","","A read, copy-on-write memory map. Writes to the memory map will not be\ncarried through to the underlying file. It is unspecified whether\nchanges made to the file after the memory map is created will be\nvisible.",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"write","","Returns `true` if the `Protection` is writable.",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"open","","Opens a file-backed memory map.",2,{"inputs":[{"name":"file"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_path","","Opens a file-backed memory map.",2,{"inputs":[{"name":"p"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_with_offset","","Opens a file-backed memory map with the specified offset and length.",2,{"inputs":[{"name":"file"},{"name":"protection"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"anonymous","","Opens an anonymous memory map.",2,{"inputs":[{"name":"usize"},{"name":"protection"}],"output":{"name":"result"}}],[11,"anonymous_with_options","","Opens an anonymous memory map with the provided options.",2,{"inputs":[{"name":"usize"},{"name":"protection"},{"name":"mmapoptions"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,null],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,null],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,null],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range\nto disk.",2,null],[11,"len","","Returns the length of the memory map.",2,null],[11,"ptr","","Returns a pointer to the mapped memory.",2,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",2,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",2,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",2,null],[11,"into_view","","Creates a splittable mmap view from the mmap.",2,null],[11,"into_view_sync","","Creates a thread-safe splittable mmap view from the mmap.",2,null],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",3,null],[11,"restrict","","Restricts the range of the view to the provided offset and length.",3,null],[11,"flush","","Flushes outstanding view modifications to disk.",3,null],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to\ndisk.",3,null],[11,"len","","Returns the length of the memory map view.",3,null],[11,"ptr","","Returns a shared pointer to the mapped memory.",3,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",3,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",3,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",3,null],[11,"clone","","Clones the view of the memory map.",3,null],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",4,null],[11,"restrict","","Restricts the range of this view to the provided offset and length.",4,null],[11,"flush","","Flushes outstanding view modifications to disk.",4,null],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",4,null],[11,"len","","Returns the length of the memory map view.",4,null],[11,"ptr","","Returns a shared pointer to the mapped memory.",4,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",4,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",4,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",4,null],[11,"clone","","Clones the view of the memory map.",4,null]],"paths":[[3,"MmapOptions"],[4,"Protection"],[3,"Mmap"],[3,"MmapView"],[3,"MmapViewSync"]]};
searchIndex["fs2"] = {"doc":"","items":[[5,"lock_contended_error","fs2","Returns the error that a call to a try lock method on a contended file will\nreturn.",null,{"inputs":[],"output":{"name":"error"}}],[5,"free_space","","Returns the number of free bytes in the file system containing the provided\npath.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"available_space","","Returns the available space in bytes to non-priveleged users in the file\nsystem containing the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"total_space","","Returns the total space in bytes in the file system containing the provided\npath.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"allocation_granularity","","Returns the filesystem&#39;s disk space allocation granularity in bytes.\nThe provided path may be for any file in the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[8,"FileExt","","Extension trait for `std::fs::File` which provides allocation, duplication and locking methods.",null,null],[10,"duplicate","","Returns a duplicate instance of the file.",0,null],[10,"allocated_size","","Returns the amount of physical space allocated for a file.",0,null],[10,"allocate","","Ensures that at least `len` bytes of disk space are allocated for the\nfile, and the file size is at least `len` bytes. After a successful call\nto `allocate`, subsequent writes to the file within the specified length\nare guaranteed not to fail because of lack of disk space.",0,null],[10,"lock_shared","","Locks the file for shared usage, blocking if the file is currently\nlocked exclusively.",0,null],[10,"lock_exclusive","","Locks the file for exclusive usage, blocking if the file is currently\nlocked.",0,null],[10,"try_lock_shared","","Locks the file for shared usage, or returns a an error if the file is\ncurrently locked (see `lock_contended_error`).",0,null],[10,"try_lock_exclusive","","Locks the file for shared usage, or returns a an error if the file is\ncurrently locked (see `lock_contended_error`).",0,null],[10,"unlock","","Unlocks the file.",0,null]],"paths":[[8,"FileExt"]]};
searchIndex["tempfile"] = {"doc":"Securely create and manage temporary files. Temporary files created by this create are\nautomatically deleted.","items":[[3,"NamedTempFile","tempfile","A named temporary file.",null,null],[3,"NamedTempFileOptions","","Create a new temporary file with custom parameters.",null,null],[3,"PersistError","","Error returned when persisting a temporary file fails",null,null],[12,"error","","The underlying IO error.",0,null],[12,"file","","The temporary file that couldn&#39;t be persisted.",0,null],[5,"tempfile","","Create an unnamed temporary file.",null,{"inputs":[],"output":{"name":"result"}}],[5,"tempfile_in","","Create an unnamed temporary file in the specified directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"fmt","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"fmt","","",0,null],[11,"from","","",1,{"inputs":[{"name":"persisterror"}],"output":{"name":"namedtempfile"}}],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"new","","Create a new temporary file.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_in","","Create a new temporary file in the specified directory.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"path","","Get the temporary file&#39;s path.",1,null],[11,"close","","Close and remove the temporary file.",1,null],[11,"persist","","Persist the temporary file at the target path.",1,null],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",1,null],[11,"reopen","","Reopen the temporary file.",1,null],[11,"drop","","",1,null],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,null],[11,"seek","","",1,null],[11,"as_raw_fd","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new","","Create a new NamedTempFileOptions",2,{"inputs":[],"output":{"name":"self"}}],[11,"prefix","","Set a custom filename prefix.",2,null],[11,"suffix","","Set a custom filename suffix.",2,null],[11,"rand_bytes","","Set the number of random bytes.",2,null],[11,"create","","Create the named temporary file.",2,null],[11,"create_in","","Create the named temporary file in the specified directory.",2,null]],"paths":[[3,"PersistError"],[3,"NamedTempFile"],[3,"NamedTempFileOptions"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn&#39;t\nadvance itself. `.peek()` can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"clone","itertools","",42,null],[11,"new","","Create a new **PadUsing** iterator.",42,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",43,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"new","","Create a new `RepeatCall` from a closure.",44,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",45,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",46,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",45,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",45,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",45,null],[11,"len","","Return the number of elements in the iterator.",45,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"index","","Return a reference to the element at a given index.",45,null],[11,"fmt","","",45,null],[11,"len","","",45,null],[11,"get_unchecked","","",45,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",46,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",46,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",46,null],[11,"len","","Return the number of elements in the iterator.",46,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"index","","Return a reference to the element at a given index.",46,null],[11,"fmt","","",46,null],[11,"len","","",46,null],[11,"get_unchecked","","",46,null],[11,"clone","","",45,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",46,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"clone","","",49,null],[11,"new","","Create a new `ZipLongest` iterator.",49,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"clone","","",50,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",50,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",51,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",51,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"len","","",51,null],[11,"get_unchecked","","",51,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",52,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",52,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",52,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",52,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",52,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",52,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",52,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",52,null],[11,"slice","","Return a sliced iterator.",52,null],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",52,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",52,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",52,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",52,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",52,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",52,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",52,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",52,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",52,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",52,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",52,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",52,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",52,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",52,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",52,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",52,null],[11,"flatten","","Unravel a nested iterator.",52,null],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",52,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",52,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",52,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",52,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",52,null],[11,"format","","Format all iterator elements, separated by `sep`.",52,null],[11,"fold_results","","Fold `Result` values from an iterator.",52,null],[11,"fold_options","","Fold `Option` values from an iterator.",52,null],[11,"fold1","","Accumulator of the elements in the iterator.",52,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",52,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",52,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",52,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",52,null],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["atomicwrites"] = {"doc":"","items":[[3,"AtomicFile","atomicwrites","",null,null],[4,"OverwriteBehavior","","",null,null],[13,"AllowOverwrite","","Overwrite files silently.",0,null],[13,"DisallowOverwrite","","Don&#39;t overwrite files. `AtomicFile.write` will raise errors for such conditions only after\nyou&#39;ve already written your data.",0,null],[5,"replace_atomic","","Move `src` to `dst`. If `dst` exists, it will be silently overwritten.",null,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"result"}}],[5,"move_atomic","","Move `src` to `dst`. An error will be returned if `dst` exists.",null,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"result"}}],[11,"clone","","",0,null],[11,"new","","Helper for writing to `path` in write-only mode.",1,{"inputs":[{"name":"p"},{"name":"overwritebehavior"}],"output":{"name":"self"}}],[11,"new_with_tmpdir","","",1,{"inputs":[{"name":"p"},{"name":"overwritebehavior"},{"name":"p"}],"output":{"name":"self"}}],[11,"path","","Get the target filepath.",1,null],[11,"write","","Open a temporary file, call `f` on it (which is supposed to write to it), then move the\nfile atomically to `self.path`.",1,null]],"paths":[[4,"OverwriteBehavior"],[3,"AtomicFile"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when\nit goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix, `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir`\nwhose name will have the prefix `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,null],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and\nreturns it. This destroys the `TempDir` without deleting the\ndirectory represented by the returned `Path`.",0,null],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,null],[11,"as_ref","","",0,null],[11,"fmt","","",0,null],[11,"drop","","",0,null]],"paths":[[3,"TempDir"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"CharClass","regex_syntax","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",1,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",1,null],[12,"chars","regex_syntax::Expr","The characters.",1,null],[12,"casei","","Whether to match case insensitively.",1,null],[13,"AnyChar","regex_syntax","Match any character.",1,null],[13,"AnyCharNoNL","","Match any character, excluding new line.",1,null],[13,"Class","","A character class.",1,null],[13,"StartLine","","Match the start of a line or beginning of input.",1,null],[13,"EndLine","","Match the end of a line or end of input.",1,null],[13,"StartText","","Match the beginning of input.",1,null],[13,"EndText","","Match the end of input.",1,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",1,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",1,null],[13,"Group","","A group, possibly non-capturing.",1,null],[12,"e","regex_syntax::Expr","The expression inside the group.",1,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",1,null],[12,"name","","The capture name, only for capturing named groups.",1,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",1,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",1,null],[12,"r","","The type of repeat operator used.",1,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",1,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",1,null],[13,"Alternate","","An alternation of expressions. Only one must match.",1,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",2,null],[13,"ZeroOrMore","","Match zero or more (`*`).",2,null],[13,"OneOrMore","","Match one or more (`+`).",2,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",2,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",2,null],[12,"max","","Optional upper bound on the number of matches.",2,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",3,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",3,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",3,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",3,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",3,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",3,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",3,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",3,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",3,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",3,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",3,null],[12,"end","","The second character specified in the range.",3,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",3,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",3,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",3,null],[12,"max","","The second number specified in the repetition.",3,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",3,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",3,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",3,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",3,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",3,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",3,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",3,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",3,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",3,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",3,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",3,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",3,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",3,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",3,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",3,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",3,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",3,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",3,null],[5,"is_punct","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"new","","Create a new builder for configuring expression parsing.",5,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",5,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",5,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",5,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",5,null],[11,"parse","","Parses a string in a regular expression syntax tree.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",1,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",1,null],[11,"deref","","",4,null],[11,"into_iter","","",4,null],[11,"new","","Create a new class from an existing set of ranges.",4,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",4,null],[11,"negate","","Negates the character class.",4,null],[11,"case_fold","","Apply case folding to this character class.",4,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",4,null],[11,"fmt","","",0,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",6,null],[11,"kind","","Returns the type of the regex parse error.",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",3,null]],"paths":[[3,"ClassRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"CharClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,null],[11,"next_u64","","",24,null],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,null],[11,"next_u64","","Return the next random u64.",27,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",27,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,null],[11,"choose","","Return a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,null],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,null],[11,"next","","",30,null],[11,"clone","","",31,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,null],[11,"next_u64","","",32,null],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,null],[11,"next_u32","","",33,null],[11,"next_u64","","",33,null],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["combine"] = {"doc":"This crate contains parser combinators, roughly based on the Haskell library\n[parsec](http://hackage.haskell.org/package/parsec).","items":[[3,"ParseError","combine","Struct which hold information about an error that occured at a specific position.\nCan hold multiple instances of `Error` if more that one error occured in the same position.",null,null],[12,"position","","The position where the error occured",0,null],[12,"errors","","A vector containing specific information on what errors occured at `position`",0,null],[3,"State","","The `State&lt;I&gt;` struct keeps track of the current position in the stream `I`",null,null],[12,"position","","The current position",1,null],[12,"input","","The input stream used when items are requested",1,null],[5,"from_iter","","Converts an `Iterator` into a stream.",null,{"inputs":[{"name":"i"}],"output":{"name":"iteratorstream"}}],[5,"char","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"char"}],"output":{"name":"token"}}],[5,"digit","","Parses a digit from a stream containing characters",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parses whitespace",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over zero or more spaces",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline character",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline, returning the newline character.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab character",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase letter",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase letter",null,{"inputs":[],"output":{"name":"lower"}}],[5,"letter","","Parses an alphabet letter",null,{"inputs":[],"output":{"name":"letter"}}],[5,"alpha_num","","Parses either an alphabet letter or digit",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"oct_digit","","Parses an octal digit",null,{"inputs":[],"output":{"name":"octdigit"}}],[5,"string","","Parses the string `s`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"any","","Parses any token",null,{"inputs":[],"output":{"name":"any"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`\nReturns the value of `parser`",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`\nThe value returned is the one produced by the left associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`\nThe value returned is the one produced by the right associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainr1"}}],[5,"choice","","Takes an array of parsers and tries to apply them each in order.\nFails if all parsers fails or if an applied parser consumes input before failing.",null,{"inputs":[{"name":"s"}],"output":{"name":"choice"}}],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"inputs":[],"output":{"name":"eof"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to\ndo the parsing. This is commonly useful to allow multiple parsers to share some environment\nwhile still allowing the parsers to be written in separate functions.",null,null],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many, `many::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many1 `many1::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"optional","","Returns `Some(value)` and `None` on parse failure (always succeeds)",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"parser","","Wraps a function, turning it into a parser\nMainly needed to turn closures into parsers as function types can be casted to function pointers\nto make them usable as a parser",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfy"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby1"}}],[5,"sep_end_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby"}}],[5,"sep_end_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby1"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"item"}],"output":{"name":"token"}}],[5,"try","","Try acts as `p` except it acts as if the parser hadn&#39;t consumed any input\nif `p` returns an error after consuming input",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[5,"look_ahead","","look_ahead acts as p but doesn&#39;t consume input on success.",null,{"inputs":[{"name":"p"}],"output":{"name":"lookahead"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"unexpected","","Always fails with `message` as an unexpected error.\nNever consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"not_followed_by","","Succeeds only if `parser` fails.\nNever consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[0,"primitives","","Module containing the primitive types which is used to create and compose more advanced parsers",null,null],[3,"SourcePosition","combine::primitives","Struct which represents a position in a source file",null,null],[12,"line","","Current line of the input",2,null],[12,"column","","Current column of the input",2,null],[3,"BytePosition","","Struct which represents a position in a byte stream",null,null],[12,"position","","Current position",3,null],[3,"ParseError","","Struct which hold information about an error that occured at a specific position.\nCan hold multiple instances of `Error` if more that one error occured in the same position.",null,null],[12,"position","","The position where the error occured",0,null],[12,"errors","","A vector containing specific information on what errors occured at `position`",0,null],[3,"State","","The `State&lt;I&gt;` struct keeps track of the current position in the stream `I`",null,null],[12,"position","","The current position",1,null],[12,"input","","The input stream used when items are requested",1,null],[3,"SliceStream","","Newtype for constructing a stream from a slice where the items in the slice are not copyable",null,null],[12,"0","","",4,null],[3,"IteratorStream","","Wrapper around iterators which allows them to be treated as a stream.\nReturned by `from_iter`.",null,null],[4,"Info","","Enum holding error information\nAs there is implementations of `From` for `T: Positioner`, `String` and `&amp;&#39;static str` the\nconstructor need not be used directly as calling `msg.into()` should turn a message into the\ncorrect `Info` variant",null,null],[13,"Token","","",5,null],[13,"Range","","",5,null],[13,"Owned","","",5,null],[13,"Borrowed","","",5,null],[4,"Error","","Enum used to store information about an error that has occured",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",6,null],[13,"Expected","","Error indicating that the parser expected something else",6,null],[13,"Message","","Generic message",6,null],[13,"Other","","Variant for containing other types of errors",6,null],[4,"Consumed","","Enum used to indicate if a parser consumed any items of the stream it was given as an input",null,null],[13,"Consumed","","Constructor indicating that the parser has consumed elements",7,null],[13,"Empty","","Constructor indicating that the parser did not consume any elements",7,null],[5,"from_iter","","Converts an `Iterator` into a stream.",null,{"inputs":[{"name":"i"}],"output":{"name":"iteratorstream"}}],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate wether they were\nsuccessful or not.\n`O` is the type that is output on success\n`I` is the specific stream type used in the parser",null,null],[8,"Stream","","A stream is a sequence of items that can be extracted one by one",null,null],[16,"Item","","The type of items which is yielded from this stream",8,null],[16,"Range","","The type of a range of items yielded from this stream.\nTypes which do not a have a way of yielding ranges of items should just use the\nSelf::Item for this type",8,null],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements\nReturns `Err` if no element could be retrieved",8,null],[8,"RangeStream","","A `RangeStream` is an extension of Stream which allows for zero copy parsing",null,null],[10,"uncons_range","","Takes `size` elements from the stream\nFails if the length of the stream is less than `size`.",9,null],[10,"uncons_while","","Takes items from stream, testing each one with `predicate`\nreturns the range of items which passed `predicate`",9,null],[8,"Range","","",null,null],[10,"len","","Returns the remaining length of `self`.\nThe returned length need not be the same as the number of items left in the stream",10,null],[8,"Positioner","","Trait for updating the position for types which can be yielded from a `Stream`.",null,null],[16,"Position","","The type which keeps track of the position.",11,null],[10,"start","","Creates a start position",11,{"inputs":[],"output":{"name":"position"}}],[10,"update","","Updates the position given that `self` has been taken from the stream",11,null],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into\nthe type `Output`.",null,null],[16,"Input","","The type which is take as input for the parser. The type must implement the `Stream` trait\nwhich allows the parser to read item from the type.",12,null],[16,"Output","","The type which is returned if the parser is successful.",12,null],[11,"parse","","Entrypoint of the parser\nTakes some input and tries to parse it returning a `ParseResult`",12,null],[11,"parse_state","","Parses using the state `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",12,null],[11,"parse_lazy","","Specialized version of parse_state where the parser does not need to add an error to the\n`ParseError` when it does not consume any input before encountering the error.\nInstead the error can be added later through the `add_error` method",12,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed",12,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"char"}],"output":{"name":"info"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"info"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"info"}}],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"from","","",6,{"inputs":[{"name":"e"}],"output":{"name":"error"}}],[11,"end_of_input","","",6,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"is_empty","","Returns true if `self` is empty",7,null],[11,"into_inner","","Extracts the contained value",7,null],[11,"as_consumed","","Converts `self` into the Consumed state",7,null],[11,"as_empty","","Converts `self` into theEmpty state",7,null],[11,"map","","Maps over the contained value without changing the consumed state",7,null],[11,"merge","","",7,null],[11,"combine","","Combines the Consumed flags from `self` and the result of `f`",7,null],[11,"new","","",0,{"inputs":[{"name":"position"},{"name":"error"}],"output":{"name":"parseerror"}}],[11,"empty","","",0,{"inputs":[{"name":"position"}],"output":{"name":"parseerror"}}],[11,"from_errors","","",0,{"inputs":[{"name":"position"},{"name":"vec"}],"output":{"name":"parseerror"}}],[11,"end_of_input","","",0,{"inputs":[{"name":"position"}],"output":{"name":"parseerror"}}],[11,"add_message","","",0,null],[11,"add_error","","",0,null],[11,"set_expected","","",0,null],[11,"merge","","",0,null],[11,"description","","",0,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",2,null],[11,"fmt","","",6,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","Creates a new `State&lt;I&gt;` from an input stream. Initializes the position to\n`Positioner::start()`",1,{"inputs":[{"name":"i"}],"output":{"name":"state"}}],[11,"uncons","","`uncons` is the most general way of extracting and item from a stream\nIt takes a function `f` as argument which should update the position\naccording to the item that was extracted\nUsually you want to use `uncons_char` instead which works directly on character streams",1,null],[11,"update","","Updates the `position` and `input` to be as if `item` was removed and `rest` is\nthe remaining input",1,null],[11,"uncons_range","","Removes `size` items from the input returning them as a range.\nFails if there are fewer items than `size`",1,null],[11,"uncons_while","","Removes items from the input while `predicate` returns `true`.",1,null],[11,"fmt","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"uncons","","",4,null],[11,"uncons_range","","",4,null],[11,"uncons_while","","",4,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"uncons","","",13,null],[11,"start","","",4,{"inputs":[],"output":{"name":"position"}}],[11,"update","","",4,null],[0,"combinator","combine","Module containing all specific parsers",null,null],[3,"Any","combine::combinator","",null,null],[3,"Satisfy","","",null,null],[3,"Token","","",null,null],[3,"Choice","","",null,null],[3,"Unexpected","","",null,null],[3,"Value","","",null,null],[3,"NotFollowedBy","","",null,null],[3,"Eof","","",null,null],[3,"Iter","","",null,null],[3,"Many","","",null,null],[3,"Many1","","",null,null],[3,"SkipMany","","",null,null],[3,"SkipMany1","","",null,null],[3,"SepBy","","",null,null],[3,"SepBy1","","",null,null],[3,"SepEndBy","","",null,null],[3,"SepEndBy1","","",null,null],[3,"FnParser","","",null,null],[3,"Optional","","",null,null],[3,"Between","","",null,null],[3,"Chainl1","","",null,null],[3,"Chainr1","","",null,null],[3,"Try","","",null,null],[3,"LookAhead","","",null,null],[3,"And","","",null,null],[3,"With","","",null,null],[3,"Skip","","",null,null],[3,"Message","","",null,null],[3,"Or","","",null,null],[3,"Map","","",null,null],[3,"Then","","",null,null],[3,"Expected","","",null,null],[3,"AndThen","","",null,null],[3,"EnvParser","","",null,null],[3,"Range","","",null,null],[3,"Take","","",null,null],[3,"TakeWhile","","",null,null],[3,"TakeWhile1","","",null,null],[5,"any","","Parses any token",null,{"inputs":[],"output":{"name":"any"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfy"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"item"}],"output":{"name":"token"}}],[5,"choice","","Takes an array of parsers and tries to apply them each in order.\nFails if all parsers fails or if an applied parser consumes input before failing.",null,{"inputs":[{"name":"s"}],"output":{"name":"choice"}}],[5,"unexpected","","Always fails with `message` as an unexpected error.\nNever consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"not_followed_by","","Succeeds only if `parser` fails.\nNever consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"inputs":[],"output":{"name":"eof"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many, `many::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many1 `many1::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby1"}}],[5,"sep_end_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby"}}],[5,"sep_end_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby1"}}],[5,"parser","","Wraps a function, turning it into a parser\nMainly needed to turn closures into parsers as function types can be casted to function pointers\nto make them usable as a parser",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"optional","","Returns `Some(value)` and `None` on parse failure (always succeeds)",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`\nReturns the value of `parser`",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`\nThe value returned is the one produced by the left associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`\nThe value returned is the one produced by the right associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainr1"}}],[5,"try","","Try acts as `p` except it acts as if the parser hadn&#39;t consumed any input\nif `p` returns an error after consuming input",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[5,"look_ahead","","look_ahead acts as p but doesn&#39;t consume input on success.",null,{"inputs":[{"name":"p"}],"output":{"name":"lookahead"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to\ndo the parsing. This is commonly useful to allow multiple parsers to share some environment\nwhile still allowing the parsers to be written in separate functions.",null,null],[5,"range","","```\n# extern crate combine as pc;\n# use pc::combinator::range;\n# use pc::*;\n# fn main() {\nlet mut parser = range(&quot;hello&quot;);\nlet result = parser.parse(&quot;hello world&quot;);\nassert_eq!(result, Ok((&quot;hello&quot;, &quot; world&quot;)));\nlet result = parser.parse(&quot;hel world&quot;);\nassert!(result.is_err());\n# }\n```",null,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[5,"take","","```\n# extern crate combine as pc;\n# use pc::combinator::take;\n# use pc::*;\n# fn main() {\nlet mut parser = take(4);\nlet result = parser.parse(&quot;123abc&quot;);\nassert_eq!(result, Ok((&quot;123a&quot;, &quot;bc&quot;)));\nlet result = parser.parse(&quot;abc&quot;);\nassert!(result.is_err());\n# }\n```",null,{"inputs":[{"name":"usize"}],"output":{"name":"take"}}],[5,"take_while","","```\n# extern crate combine as pc;\n# use pc::combinator::take_while;\n# use pc::*;\n# fn main() {\nlet mut parser = take_while(|c: char| c.is_digit(10));\nlet result = parser.parse(&quot;123abc&quot;);\nassert_eq!(result, Ok((&quot;123&quot;, &quot;abc&quot;)));\nlet result = parser.parse(&quot;abc&quot;);\nassert_eq!(result, Ok((&quot;&quot;, &quot;abc&quot;)));\n# }\n```",null,{"inputs":[{"name":"f"}],"output":{"name":"takewhile"}}],[5,"take_while1","","```\n# extern crate combine as pc;\n# use pc::combinator::take_while1;\n# use pc::*;\n# fn main() {\nlet mut parser = take_while1(|c: char| c.is_digit(10));\nlet result = parser.parse(&quot;123abc&quot;);\nassert_eq!(result, Ok((&quot;123&quot;, &quot;abc&quot;)));\nlet result = parser.parse(&quot;abc&quot;);\nassert!(result.is_err());\n# }\n```",null,{"inputs":[{"name":"f"}],"output":{"name":"takewhile1"}}],[8,"ParserExt","","Extension trait which provides functions that are more conveniently used through method calls",null,null],[11,"with","","Discards the value of the `self` parser and returns the value of `p`\nFails if any of the parsers fails",14,null],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`\nFails if any of the parsers fails",14,null],[11,"and","","Parses with `self` followed by `p`\nSucceeds if both parsers succeed, otherwise fails\nReturns a tuple with both values on success",14,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any\ninput it tries to consume the same input using `p`.",14,null],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse\nthe rest of the input",14,null],[11,"map","","Uses `f` to map over the parsed value",14,null],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error",14,null],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are\nreplaced by `msg`. `msg` is then used in error messages as &quot;Expected `msg`&quot;.",14,null],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully\n`f` may optionally fail with an error which is automatically converted to a `ParseError`",14,null],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to `many` when\ncollecting directly into a `FromIterator` type is not desirable",14,null],[11,"clone","","",15,null],[11,"parse_lazy","","",15,null],[11,"clone","","",16,null],[11,"parse_lazy","","",16,null],[11,"clone","","",17,null],[11,"parse_lazy","","",17,null],[11,"add_error","","",17,null],[11,"clone","","",18,null],[11,"parse_lazy","","",18,null],[11,"add_error","","",18,null],[11,"clone","","",19,null],[11,"parse_lazy","","",19,null],[11,"add_error","","",19,null],[11,"clone","","",20,null],[11,"parse_lazy","","",20,null],[11,"clone","","",21,null],[11,"parse_state","","",21,null],[11,"parse_lazy","","",21,null],[11,"add_error","","",21,null],[11,"clone","","",22,null],[11,"parse_lazy","","",22,null],[11,"add_error","","",22,null],[11,"into_result","","Converts the iterator to a `ParseResult`, returning `Ok` if the parsing so far has be done\nwithout any errors which consumed data.",23,null],[11,"next","","",23,null],[11,"clone","","",24,null],[11,"parse_state","","",24,null],[11,"clone","","",25,null],[11,"parse_lazy","","",25,null],[11,"add_error","","",25,null],[11,"clone","","",26,null],[11,"parse_state","","",26,null],[11,"parse_lazy","","",26,null],[11,"add_error","","",26,null],[11,"clone","","",27,null],[11,"parse_state","","",27,null],[11,"parse_lazy","","",27,null],[11,"add_error","","",27,null],[11,"clone","","",28,null],[11,"parse_lazy","","",28,null],[11,"add_error","","",28,null],[11,"clone","","",29,null],[11,"parse_lazy","","",29,null],[11,"add_error","","",29,null],[11,"clone","","",30,null],[11,"parse_lazy","","",30,null],[11,"add_error","","",30,null],[11,"clone","","",31,null],[11,"parse_lazy","","",31,null],[11,"add_error","","",31,null],[11,"clone","","",32,null],[11,"parse_state","","",32,null],[11,"clone","","",33,null],[11,"parse_lazy","","",33,null],[11,"clone","","",34,null],[11,"parse_state","","",34,null],[11,"parse_lazy","","",34,null],[11,"add_error","","",34,null],[11,"clone","","",35,null],[11,"parse_lazy","","",35,null],[11,"add_error","","",35,null],[11,"clone","","",36,null],[11,"parse_lazy","","",36,null],[11,"add_error","","",36,null],[11,"clone","","",37,null],[11,"parse_lazy","","",37,null],[11,"add_error","","",37,null],[11,"clone","","",38,null],[11,"parse_lazy","","",38,null],[11,"add_error","","",38,null],[11,"clone","","",39,null],[11,"parse_lazy","","",39,null],[11,"add_error","","",39,null],[11,"clone","","",40,null],[11,"parse_lazy","","",40,null],[11,"add_error","","",40,null],[11,"clone","","",41,null],[11,"parse_lazy","","",41,null],[11,"add_error","","",41,null],[11,"clone","","",42,null],[11,"parse_state","","",42,null],[11,"parse_lazy","","",42,null],[11,"add_error","","",42,null],[11,"clone","","",43,null],[11,"parse_lazy","","",43,null],[11,"add_error","","",43,null],[11,"clone","","",44,null],[11,"parse_lazy","","",44,null],[11,"add_error","","",44,null],[11,"clone","","",45,null],[11,"parse_lazy","","",45,null],[11,"add_error","","",45,null],[11,"clone","","",46,null],[11,"parse_state","","",46,null],[11,"parse_lazy","","",46,null],[11,"add_error","","",46,null],[11,"clone","","",47,null],[11,"parse_lazy","","",47,null],[11,"add_error","","",47,null],[11,"clone","","",48,null],[11,"parse_lazy","","",48,null],[11,"parse_lazy","","",49,null],[11,"add_error","","",49,null],[11,"parse_lazy","","",50,null],[11,"parse_lazy","","",51,null],[11,"parse_lazy","","",52,null],[0,"char","combine","Module containg parsers specialized on character streams",null,null],[3,"Digit","combine::char","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"NewLine","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"OctDigit","","",null,null],[3,"HexDigit","","",null,null],[3,"String","","",null,null],[5,"char","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"char"}],"output":{"name":"token"}}],[5,"digit","","Parses a digit from a stream containing characters",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parses whitespace",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over zero or more spaces",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline character",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline, returning the newline character.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab character",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase letter",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase letter",null,{"inputs":[],"output":{"name":"lower"}}],[5,"alpha_num","","Parses either an alphabet letter or digit",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"letter","","Parses an alphabet letter",null,{"inputs":[],"output":{"name":"letter"}}],[5,"oct_digit","","Parses an octal digit",null,{"inputs":[],"output":{"name":"octdigit"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"string","","Parses the string `s`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",53,null],[11,"parse_lazy","","",53,null],[11,"add_error","","",53,null],[11,"clone","","",54,null],[11,"parse_lazy","","",54,null],[11,"add_error","","",54,null],[11,"clone","","",55,null],[11,"parse_lazy","","",55,null],[11,"add_error","","",55,null],[11,"clone","","",56,null],[11,"parse_lazy","","",56,null],[11,"add_error","","",56,null],[11,"clone","","",57,null],[11,"parse_lazy","","",57,null],[11,"add_error","","",57,null],[11,"clone","","",58,null],[11,"parse_lazy","","",58,null],[11,"add_error","","",58,null],[11,"clone","","",59,null],[11,"parse_lazy","","",59,null],[11,"add_error","","",59,null],[11,"clone","","",60,null],[11,"parse_lazy","","",60,null],[11,"add_error","","",60,null],[11,"clone","","",61,null],[11,"parse_lazy","","",61,null],[11,"add_error","","",61,null],[11,"clone","","",62,null],[11,"parse_lazy","","",62,null],[11,"add_error","","",62,null],[11,"clone","","",63,null],[11,"parse_lazy","","",63,null],[11,"add_error","","",63,null],[11,"clone","","",64,null],[11,"parse_lazy","","",64,null],[11,"add_error","","",64,null],[11,"clone","","",65,null],[11,"parse_lazy","","",65,null],[11,"add_error","","",65,null],[6,"ParseResult","combine","A type alias over the specific `Result` type used by parsers to indicate wether they were\nsuccessful or not.\n`O` is the type that is output on success\n`I` is the specific stream type used in the parser",null,null],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into\nthe type `Output`.",null,null],[16,"Input","","The type which is take as input for the parser. The type must implement the `Stream` trait\nwhich allows the parser to read item from the type.",12,null],[16,"Output","","The type which is returned if the parser is successful.",12,null],[11,"parse","","Entrypoint of the parser\nTakes some input and tries to parse it returning a `ParseResult`",12,null],[11,"parse_state","","Parses using the state `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",12,null],[11,"parse_lazy","","Specialized version of parse_state where the parser does not need to add an error to the\n`ParseError` when it does not consume any input before encountering the error.\nInstead the error can be added later through the `add_error` method",12,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed",12,null],[8,"ParserExt","","Extension trait which provides functions that are more conveniently used through method calls",null,null],[11,"with","","Discards the value of the `self` parser and returns the value of `p`\nFails if any of the parsers fails",14,null],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`\nFails if any of the parsers fails",14,null],[11,"and","","Parses with `self` followed by `p`\nSucceeds if both parsers succeed, otherwise fails\nReturns a tuple with both values on success",14,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any\ninput it tries to consume the same input using `p`.",14,null],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse\nthe rest of the input",14,null],[11,"map","","Uses `f` to map over the parsed value",14,null],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error",14,null],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are\nreplaced by `msg`. `msg` is then used in error messages as &quot;Expected `msg`&quot;.",14,null],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully\n`f` may optionally fail with an error which is automatically converted to a `ParseError`",14,null],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to `many` when\ncollecting directly into a `FromIterator` type is not desirable",14,null]],"paths":[[3,"ParseError"],[3,"State"],[3,"SourcePosition"],[3,"BytePosition"],[3,"SliceStream"],[4,"Info"],[4,"Error"],[4,"Consumed"],[8,"Stream"],[8,"RangeStream"],[8,"Range"],[8,"Positioner"],[8,"Parser"],[3,"IteratorStream"],[8,"ParserExt"],[3,"Any"],[3,"Satisfy"],[3,"Token"],[3,"Choice"],[3,"Unexpected"],[3,"Value"],[3,"NotFollowedBy"],[3,"Eof"],[3,"Iter"],[3,"Many"],[3,"Many1"],[3,"SkipMany"],[3,"SkipMany1"],[3,"SepBy"],[3,"SepBy1"],[3,"SepEndBy"],[3,"SepEndBy1"],[3,"FnParser"],[3,"Optional"],[3,"Between"],[3,"Chainl1"],[3,"Chainr1"],[3,"Try"],[3,"LookAhead"],[3,"And"],[3,"With"],[3,"Skip"],[3,"Message"],[3,"Or"],[3,"Map"],[3,"Then"],[3,"Expected"],[3,"AndThen"],[3,"EnvParser"],[3,"Range"],[3,"Take"],[3,"TakeWhile"],[3,"TakeWhile1"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"NewLine"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"String"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_frsize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_favail","","",35,null],[12,"f_fsid","","",35,null],[12,"f_flag","","",35,null],[12,"f_namemax","","",35,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",36,null],[12,"dqb_bsoftlimit","","",36,null],[12,"dqb_curspace","","",36,null],[12,"dqb_ihardlimit","","",36,null],[12,"dqb_isoftlimit","","",36,null],[12,"dqb_curinodes","","",36,null],[12,"dqb_btime","","",36,null],[12,"dqb_itime","","",36,null],[12,"dqb_valid","","",36,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",37,null],[12,"ssi_errno","","",37,null],[12,"ssi_code","","",37,null],[12,"ssi_pid","","",37,null],[12,"ssi_uid","","",37,null],[12,"ssi_fd","","",37,null],[12,"ssi_tid","","",37,null],[12,"ssi_band","","",37,null],[12,"ssi_overrun","","",37,null],[12,"ssi_trapno","","",37,null],[12,"ssi_status","","",37,null],[12,"ssi_int","","",37,null],[12,"ssi_ptr","","",37,null],[12,"ssi_utime","","",37,null],[12,"ssi_stime","","",37,null],[12,"ssi_addr","","",37,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",38,null],[12,"mq_maxmsg","","",38,null],[12,"mq_msgsize","","",38,null],[12,"mq_curmsgs","","",38,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",39,null],[12,"if_name","","",39,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",40,null],[12,"sa_mask","","",40,null],[12,"sa_flags","","",40,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",41,null],[12,"ss_flags","","",41,null],[12,"ss_size","","",41,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",42,null],[12,"si_errno","","",42,null],[12,"si_code","","",42,null],[12,"_pad","","",42,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",43,null],[12,"gl_pathv","","",43,null],[12,"gl_offs","","",43,null],[12,"gl_flags","","",43,null],[3,"ucred","","",null,null],[12,"pid","","",44,null],[12,"uid","","",44,null],[12,"gid","","",44,null],[3,"statfs","","",null,null],[12,"f_type","","",45,null],[12,"f_bsize","","",45,null],[12,"f_blocks","","",45,null],[12,"f_bfree","","",45,null],[12,"f_bavail","","",45,null],[12,"f_files","","",45,null],[12,"f_ffree","","",45,null],[12,"f_fsid","","",45,null],[12,"f_namelen","","",45,null],[12,"f_frsize","","",45,null],[3,"msghdr","","",null,null],[12,"msg_name","","",46,null],[12,"msg_namelen","","",46,null],[12,"msg_iov","","",46,null],[12,"msg_iovlen","","",46,null],[12,"msg_control","","",46,null],[12,"msg_controllen","","",46,null],[12,"msg_flags","","",46,null],[3,"termios","","",null,null],[12,"c_iflag","","",47,null],[12,"c_oflag","","",47,null],[12,"c_cflag","","",47,null],[12,"c_lflag","","",47,null],[12,"c_line","","",47,null],[12,"c_cc","","",47,null],[12,"c_ispeed","","",47,null],[12,"c_ospeed","","",47,null],[3,"flock","","",null,null],[12,"l_type","","",48,null],[12,"l_whence","","",48,null],[12,"l_start","","",48,null],[12,"l_len","","",48,null],[12,"l_pid","","",48,null],[3,"ipc_perm","","",null,null],[12,"__key","","",49,null],[12,"uid","","",49,null],[12,"gid","","",49,null],[12,"cuid","","",49,null],[12,"cgid","","",49,null],[12,"mode","","",49,null],[12,"__seq","","",49,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",50,null],[12,"shm_segsz","","",50,null],[12,"shm_atime","","",50,null],[12,"shm_dtime","","",50,null],[12,"shm_ctime","","",50,null],[12,"shm_cpid","","",50,null],[12,"shm_lpid","","",50,null],[12,"shm_nattch","","",50,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",51,null],[12,"loads","","",51,null],[12,"totalram","","",51,null],[12,"freeram","","",51,null],[12,"sharedram","","",51,null],[12,"bufferram","","",51,null],[12,"totalswap","","",51,null],[12,"freeswap","","",51,null],[12,"procs","","",51,null],[12,"pad","","",51,null],[12,"totalhigh","","",51,null],[12,"freehigh","","",51,null],[12,"mem_unit","","",51,null],[12,"_f","","",51,null],[3,"stat","","",null,null],[12,"st_dev","","",52,null],[12,"st_ino","","",52,null],[12,"st_nlink","","",52,null],[12,"st_mode","","",52,null],[12,"st_uid","","",52,null],[12,"st_gid","","",52,null],[12,"st_rdev","","",52,null],[12,"st_size","","",52,null],[12,"st_blksize","","",52,null],[12,"st_blocks","","",52,null],[12,"st_atime","","",52,null],[12,"st_atime_nsec","","",52,null],[12,"st_mtime","","",52,null],[12,"st_mtime_nsec","","",52,null],[12,"st_ctime","","",52,null],[12,"st_ctime_nsec","","",52,null],[3,"stat64","","",null,null],[12,"st_dev","","",53,null],[12,"st_ino","","",53,null],[12,"st_nlink","","",53,null],[12,"st_mode","","",53,null],[12,"st_uid","","",53,null],[12,"st_gid","","",53,null],[12,"st_rdev","","",53,null],[12,"st_size","","",53,null],[12,"st_blksize","","",53,null],[12,"st_blocks","","",53,null],[12,"st_atime","","",53,null],[12,"st_atime_nsec","","",53,null],[12,"st_mtime","","",53,null],[12,"st_mtime_nsec","","",53,null],[12,"st_ctime","","",53,null],[12,"st_ctime_nsec","","",53,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",54,null],[12,"exponent","","",54,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",55,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",56,null],[12,"swd","","",56,null],[12,"ftw","","",56,null],[12,"fop","","",56,null],[12,"rip","","",56,null],[12,"rdp","","",56,null],[12,"mxcsr","","",56,null],[12,"mxcr_mask","","",56,null],[12,"_st","","",56,null],[12,"_xmm","","",56,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",57,null],[12,"fpregs","","",57,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",58,null],[12,"uc_link","","",58,null],[12,"uc_stack","","",58,null],[12,"uc_mcontext","","",58,null],[12,"uc_sigmask","","",58,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",59,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",60,null],[11,"clone","","",51,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",61,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",67,null],[11,"clone","","",38,null],[11,"clone","","",68,null],[11,"clone","","",39,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",69,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
initSearch(searchIndex);
